{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar wrapConnectorHooks_1 = __importDefault(require(\"./wrapConnectorHooks\"));\n\nvar isRef_1 = require(\"../utils/isRef\");\n\nvar shallowequal_1 = __importDefault(require(\"shallowequal\"));\n\nvar SourceConnector =\n/** @class */\nfunction () {\n  function SourceConnector(backend) {\n    var _this = this;\n\n    this.hooks = wrapConnectorHooks_1.default({\n      dragSource: function (node, options) {\n        _this.clearDragSource();\n\n        _this.dragSourceOptions = options || null;\n\n        if (isRef_1.isRef(node)) {\n          _this.dragSourceRef = node;\n        } else {\n          _this.dragSourceNode = node;\n        }\n\n        _this.reconnectDragSource();\n      },\n      dragPreview: function (node, options) {\n        _this.clearDragPreview();\n\n        _this.dragPreviewOptions = options || null;\n\n        if (isRef_1.isRef(node)) {\n          _this.dragPreviewRef = node;\n        } else {\n          _this.dragPreviewNode = node;\n        }\n\n        _this.reconnectDragPreview();\n      }\n    });\n    this.handlerId = null; // The drop target may either be attached via ref or connect function\n\n    this.dragSourceRef = null;\n    this.dragSourceOptionsInternal = null; // The drag preview may either be attached via ref or connect function\n\n    this.dragPreviewRef = null;\n    this.dragPreviewOptionsInternal = null;\n    this.lastConnectedHandlerId = null;\n    this.lastConnectedDragSource = null;\n    this.lastConnectedDragSourceOptions = null;\n    this.lastConnectedDragPreview = null;\n    this.lastConnectedDragPreviewOptions = null;\n    this.backend = backend;\n  }\n\n  SourceConnector.prototype.receiveHandlerId = function (newHandlerId) {\n    if (this.handlerId === newHandlerId) {\n      return;\n    }\n\n    this.handlerId = newHandlerId;\n    this.reconnect();\n  };\n\n  Object.defineProperty(SourceConnector.prototype, \"connectTarget\", {\n    get: function () {\n      return this.dragSource;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SourceConnector.prototype, \"dragSourceOptions\", {\n    get: function () {\n      return this.dragSourceOptionsInternal;\n    },\n    set: function (options) {\n      this.dragSourceOptionsInternal = options;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SourceConnector.prototype, \"dragPreviewOptions\", {\n    get: function () {\n      return this.dragPreviewOptionsInternal;\n    },\n    set: function (options) {\n      this.dragPreviewOptionsInternal = options;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SourceConnector.prototype.reconnect = function () {\n    this.reconnectDragSource();\n    this.reconnectDragPreview();\n  };\n\n  SourceConnector.prototype.reconnectDragSource = function () {\n    var dragSource = this.dragSource; // if nothing has changed then don't resubscribe\n\n    var didChange = this.didHandlerIdChange() || this.didConnectedDragSourceChange() || this.didDragSourceOptionsChange();\n\n    if (didChange) {\n      this.disconnectDragSource();\n    }\n\n    if (!this.handlerId) {\n      return;\n    }\n\n    if (!dragSource) {\n      this.lastConnectedDragSource = dragSource;\n      return;\n    }\n\n    if (didChange) {\n      this.lastConnectedHandlerId = this.handlerId;\n      this.lastConnectedDragSource = dragSource;\n      this.lastConnectedDragSourceOptions = this.dragSourceOptions;\n      this.dragSourceUnsubscribe = this.backend.connectDragSource(this.handlerId, dragSource, this.dragSourceOptions);\n    }\n  };\n\n  SourceConnector.prototype.reconnectDragPreview = function () {\n    var dragPreview = this.dragPreview; // if nothing has changed then don't resubscribe\n\n    var didChange = this.didHandlerIdChange() || this.didConnectedDragPreviewChange() || this.didDragPreviewOptionsChange();\n\n    if (!this.handlerId) {\n      this.disconnectDragPreview();\n    } else if (this.dragPreview && didChange) {\n      this.lastConnectedHandlerId = this.handlerId;\n      this.lastConnectedDragPreview = dragPreview;\n      this.lastConnectedDragPreviewOptions = this.dragPreviewOptions;\n      this.disconnectDragPreview();\n      this.dragPreviewUnsubscribe = this.backend.connectDragPreview(this.handlerId, dragPreview, this.dragPreviewOptions);\n    }\n  };\n\n  SourceConnector.prototype.didHandlerIdChange = function () {\n    return this.lastConnectedHandlerId !== this.handlerId;\n  };\n\n  SourceConnector.prototype.didConnectedDragSourceChange = function () {\n    return this.lastConnectedDragSource !== this.dragSource;\n  };\n\n  SourceConnector.prototype.didConnectedDragPreviewChange = function () {\n    return this.lastConnectedDragPreview !== this.dragPreview;\n  };\n\n  SourceConnector.prototype.didDragSourceOptionsChange = function () {\n    return !shallowequal_1.default(this.lastConnectedDragSourceOptions, this.dragSourceOptions);\n  };\n\n  SourceConnector.prototype.didDragPreviewOptionsChange = function () {\n    return !shallowequal_1.default(this.lastConnectedDragPreviewOptions, this.dragPreviewOptions);\n  };\n\n  SourceConnector.prototype.disconnectDragSource = function () {\n    if (this.dragSourceUnsubscribe) {\n      this.dragSourceUnsubscribe();\n      this.dragSourceUnsubscribe = undefined;\n    }\n  };\n\n  SourceConnector.prototype.disconnectDragPreview = function () {\n    if (this.dragPreviewUnsubscribe) {\n      this.dragPreviewUnsubscribe();\n      this.dragPreviewUnsubscribe = undefined;\n      this.dragPreviewNode = null;\n      this.dragPreviewRef = null;\n    }\n  };\n\n  Object.defineProperty(SourceConnector.prototype, \"dragSource\", {\n    get: function () {\n      return this.dragSourceNode || this.dragSourceRef && this.dragSourceRef.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SourceConnector.prototype, \"dragPreview\", {\n    get: function () {\n      return this.dragPreviewNode || this.dragPreviewRef && this.dragPreviewRef.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SourceConnector.prototype.clearDragSource = function () {\n    this.dragSourceNode = null;\n    this.dragSourceRef = null;\n  };\n\n  SourceConnector.prototype.clearDragPreview = function () {\n    this.dragPreviewNode = null;\n    this.dragPreviewRef = null;\n  };\n\n  return SourceConnector;\n}();\n\nexports.SourceConnector = SourceConnector;","map":{"version":3,"sources":["/home/janne/repot/OperaatioJyrki/node_modules/react-dnd-cjs/lib/common/SourceConnector.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","wrapConnectorHooks_1","require","isRef_1","shallowequal_1","SourceConnector","backend","_this","hooks","default","dragSource","node","options","clearDragSource","dragSourceOptions","isRef","dragSourceRef","dragSourceNode","reconnectDragSource","dragPreview","clearDragPreview","dragPreviewOptions","dragPreviewRef","dragPreviewNode","reconnectDragPreview","handlerId","dragSourceOptionsInternal","dragPreviewOptionsInternal","lastConnectedHandlerId","lastConnectedDragSource","lastConnectedDragSourceOptions","lastConnectedDragPreview","lastConnectedDragPreviewOptions","prototype","receiveHandlerId","newHandlerId","reconnect","get","enumerable","configurable","set","didChange","didHandlerIdChange","didConnectedDragSourceChange","didDragSourceOptionsChange","disconnectDragSource","dragSourceUnsubscribe","connectDragSource","didConnectedDragPreviewChange","didDragPreviewOptionsChange","disconnectDragPreview","dragPreviewUnsubscribe","connectDragPreview","undefined","current"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,oBAAoB,GAAGP,eAAe,CAACQ,OAAO,CAAC,sBAAD,CAAR,CAA1C;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,gBAAD,CAArB;;AACA,IAAIE,cAAc,GAAGV,eAAe,CAACQ,OAAO,CAAC,cAAD,CAAR,CAApC;;AACA,IAAIG,eAAe;AAAG;AAAe,YAAY;AAC7C,WAASA,eAAT,CAAyBC,OAAzB,EAAkC;AAC9B,QAAIC,KAAK,GAAG,IAAZ;;AACA,SAAKC,KAAL,GAAaP,oBAAoB,CAACQ,OAArB,CAA6B;AACtCC,MAAAA,UAAU,EAAE,UAAUC,IAAV,EAAgBC,OAAhB,EAAyB;AACjCL,QAAAA,KAAK,CAACM,eAAN;;AACAN,QAAAA,KAAK,CAACO,iBAAN,GAA0BF,OAAO,IAAI,IAArC;;AACA,YAAIT,OAAO,CAACY,KAAR,CAAcJ,IAAd,CAAJ,EAAyB;AACrBJ,UAAAA,KAAK,CAACS,aAAN,GAAsBL,IAAtB;AACH,SAFD,MAGK;AACDJ,UAAAA,KAAK,CAACU,cAAN,GAAuBN,IAAvB;AACH;;AACDJ,QAAAA,KAAK,CAACW,mBAAN;AACH,OAXqC;AAYtCC,MAAAA,WAAW,EAAE,UAAUR,IAAV,EAAgBC,OAAhB,EAAyB;AAClCL,QAAAA,KAAK,CAACa,gBAAN;;AACAb,QAAAA,KAAK,CAACc,kBAAN,GAA2BT,OAAO,IAAI,IAAtC;;AACA,YAAIT,OAAO,CAACY,KAAR,CAAcJ,IAAd,CAAJ,EAAyB;AACrBJ,UAAAA,KAAK,CAACe,cAAN,GAAuBX,IAAvB;AACH,SAFD,MAGK;AACDJ,UAAAA,KAAK,CAACgB,eAAN,GAAwBZ,IAAxB;AACH;;AACDJ,QAAAA,KAAK,CAACiB,oBAAN;AACH;AAtBqC,KAA7B,CAAb;AAwBA,SAAKC,SAAL,GAAiB,IAAjB,CA1B8B,CA2B9B;;AACA,SAAKT,aAAL,GAAqB,IAArB;AACA,SAAKU,yBAAL,GAAiC,IAAjC,CA7B8B,CA8B9B;;AACA,SAAKJ,cAAL,GAAsB,IAAtB;AACA,SAAKK,0BAAL,GAAkC,IAAlC;AACA,SAAKC,sBAAL,GAA8B,IAA9B;AACA,SAAKC,uBAAL,GAA+B,IAA/B;AACA,SAAKC,8BAAL,GAAsC,IAAtC;AACA,SAAKC,wBAAL,GAAgC,IAAhC;AACA,SAAKC,+BAAL,GAAuC,IAAvC;AACA,SAAK1B,OAAL,GAAeA,OAAf;AACH;;AACDD,EAAAA,eAAe,CAAC4B,SAAhB,CAA0BC,gBAA1B,GAA6C,UAAUC,YAAV,EAAwB;AACjE,QAAI,KAAKV,SAAL,KAAmBU,YAAvB,EAAqC;AACjC;AACH;;AACD,SAAKV,SAAL,GAAiBU,YAAjB;AACA,SAAKC,SAAL;AACH,GAND;;AAOAvC,EAAAA,MAAM,CAACC,cAAP,CAAsBO,eAAe,CAAC4B,SAAtC,EAAiD,eAAjD,EAAkE;AAC9DI,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAK3B,UAAZ;AACH,KAH6D;AAI9D4B,IAAAA,UAAU,EAAE,IAJkD;AAK9DC,IAAAA,YAAY,EAAE;AALgD,GAAlE;AAOA1C,EAAAA,MAAM,CAACC,cAAP,CAAsBO,eAAe,CAAC4B,SAAtC,EAAiD,mBAAjD,EAAsE;AAClEI,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKX,yBAAZ;AACH,KAHiE;AAIlEc,IAAAA,GAAG,EAAE,UAAU5B,OAAV,EAAmB;AACpB,WAAKc,yBAAL,GAAiCd,OAAjC;AACH,KANiE;AAOlE0B,IAAAA,UAAU,EAAE,IAPsD;AAQlEC,IAAAA,YAAY,EAAE;AARoD,GAAtE;AAUA1C,EAAAA,MAAM,CAACC,cAAP,CAAsBO,eAAe,CAAC4B,SAAtC,EAAiD,oBAAjD,EAAuE;AACnEI,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKV,0BAAZ;AACH,KAHkE;AAInEa,IAAAA,GAAG,EAAE,UAAU5B,OAAV,EAAmB;AACpB,WAAKe,0BAAL,GAAkCf,OAAlC;AACH,KANkE;AAOnE0B,IAAAA,UAAU,EAAE,IAPuD;AAQnEC,IAAAA,YAAY,EAAE;AARqD,GAAvE;;AAUAlC,EAAAA,eAAe,CAAC4B,SAAhB,CAA0BG,SAA1B,GAAsC,YAAY;AAC9C,SAAKlB,mBAAL;AACA,SAAKM,oBAAL;AACH,GAHD;;AAIAnB,EAAAA,eAAe,CAAC4B,SAAhB,CAA0Bf,mBAA1B,GAAgD,YAAY;AACxD,QAAIR,UAAU,GAAG,KAAKA,UAAtB,CADwD,CAExD;;AACA,QAAI+B,SAAS,GAAG,KAAKC,kBAAL,MACZ,KAAKC,4BAAL,EADY,IAEZ,KAAKC,0BAAL,EAFJ;;AAGA,QAAIH,SAAJ,EAAe;AACX,WAAKI,oBAAL;AACH;;AACD,QAAI,CAAC,KAAKpB,SAAV,EAAqB;AACjB;AACH;;AACD,QAAI,CAACf,UAAL,EAAiB;AACb,WAAKmB,uBAAL,GAA+BnB,UAA/B;AACA;AACH;;AACD,QAAI+B,SAAJ,EAAe;AACX,WAAKb,sBAAL,GAA8B,KAAKH,SAAnC;AACA,WAAKI,uBAAL,GAA+BnB,UAA/B;AACA,WAAKoB,8BAAL,GAAsC,KAAKhB,iBAA3C;AACA,WAAKgC,qBAAL,GAA6B,KAAKxC,OAAL,CAAayC,iBAAb,CAA+B,KAAKtB,SAApC,EAA+Cf,UAA/C,EAA2D,KAAKI,iBAAhE,CAA7B;AACH;AACJ,GAtBD;;AAuBAT,EAAAA,eAAe,CAAC4B,SAAhB,CAA0BT,oBAA1B,GAAiD,YAAY;AACzD,QAAIL,WAAW,GAAG,KAAKA,WAAvB,CADyD,CAEzD;;AACA,QAAIsB,SAAS,GAAG,KAAKC,kBAAL,MACZ,KAAKM,6BAAL,EADY,IAEZ,KAAKC,2BAAL,EAFJ;;AAGA,QAAI,CAAC,KAAKxB,SAAV,EAAqB;AACjB,WAAKyB,qBAAL;AACH,KAFD,MAGK,IAAI,KAAK/B,WAAL,IAAoBsB,SAAxB,EAAmC;AACpC,WAAKb,sBAAL,GAA8B,KAAKH,SAAnC;AACA,WAAKM,wBAAL,GAAgCZ,WAAhC;AACA,WAAKa,+BAAL,GAAuC,KAAKX,kBAA5C;AACA,WAAK6B,qBAAL;AACA,WAAKC,sBAAL,GAA8B,KAAK7C,OAAL,CAAa8C,kBAAb,CAAgC,KAAK3B,SAArC,EAAgDN,WAAhD,EAA6D,KAAKE,kBAAlE,CAA9B;AACH;AACJ,GAhBD;;AAiBAhB,EAAAA,eAAe,CAAC4B,SAAhB,CAA0BS,kBAA1B,GAA+C,YAAY;AACvD,WAAO,KAAKd,sBAAL,KAAgC,KAAKH,SAA5C;AACH,GAFD;;AAGApB,EAAAA,eAAe,CAAC4B,SAAhB,CAA0BU,4BAA1B,GAAyD,YAAY;AACjE,WAAO,KAAKd,uBAAL,KAAiC,KAAKnB,UAA7C;AACH,GAFD;;AAGAL,EAAAA,eAAe,CAAC4B,SAAhB,CAA0Be,6BAA1B,GAA0D,YAAY;AAClE,WAAO,KAAKjB,wBAAL,KAAkC,KAAKZ,WAA9C;AACH,GAFD;;AAGAd,EAAAA,eAAe,CAAC4B,SAAhB,CAA0BW,0BAA1B,GAAuD,YAAY;AAC/D,WAAO,CAACxC,cAAc,CAACK,OAAf,CAAuB,KAAKqB,8BAA5B,EAA4D,KAAKhB,iBAAjE,CAAR;AACH,GAFD;;AAGAT,EAAAA,eAAe,CAAC4B,SAAhB,CAA0BgB,2BAA1B,GAAwD,YAAY;AAChE,WAAO,CAAC7C,cAAc,CAACK,OAAf,CAAuB,KAAKuB,+BAA5B,EAA6D,KAAKX,kBAAlE,CAAR;AACH,GAFD;;AAGAhB,EAAAA,eAAe,CAAC4B,SAAhB,CAA0BY,oBAA1B,GAAiD,YAAY;AACzD,QAAI,KAAKC,qBAAT,EAAgC;AAC5B,WAAKA,qBAAL;AACA,WAAKA,qBAAL,GAA6BO,SAA7B;AACH;AACJ,GALD;;AAMAhD,EAAAA,eAAe,CAAC4B,SAAhB,CAA0BiB,qBAA1B,GAAkD,YAAY;AAC1D,QAAI,KAAKC,sBAAT,EAAiC;AAC7B,WAAKA,sBAAL;AACA,WAAKA,sBAAL,GAA8BE,SAA9B;AACA,WAAK9B,eAAL,GAAuB,IAAvB;AACA,WAAKD,cAAL,GAAsB,IAAtB;AACH;AACJ,GAPD;;AAQAzB,EAAAA,MAAM,CAACC,cAAP,CAAsBO,eAAe,CAAC4B,SAAtC,EAAiD,YAAjD,EAA+D;AAC3DI,IAAAA,GAAG,EAAE,YAAY;AACb,aAAQ,KAAKpB,cAAL,IAAwB,KAAKD,aAAL,IAAsB,KAAKA,aAAL,CAAmBsC,OAAzE;AACH,KAH0D;AAI3DhB,IAAAA,UAAU,EAAE,IAJ+C;AAK3DC,IAAAA,YAAY,EAAE;AAL6C,GAA/D;AAOA1C,EAAAA,MAAM,CAACC,cAAP,CAAsBO,eAAe,CAAC4B,SAAtC,EAAiD,aAAjD,EAAgE;AAC5DI,IAAAA,GAAG,EAAE,YAAY;AACb,aAAQ,KAAKd,eAAL,IACH,KAAKD,cAAL,IAAuB,KAAKA,cAAL,CAAoBgC,OADhD;AAEH,KAJ2D;AAK5DhB,IAAAA,UAAU,EAAE,IALgD;AAM5DC,IAAAA,YAAY,EAAE;AAN8C,GAAhE;;AAQAlC,EAAAA,eAAe,CAAC4B,SAAhB,CAA0BpB,eAA1B,GAA4C,YAAY;AACpD,SAAKI,cAAL,GAAsB,IAAtB;AACA,SAAKD,aAAL,GAAqB,IAArB;AACH,GAHD;;AAIAX,EAAAA,eAAe,CAAC4B,SAAhB,CAA0Bb,gBAA1B,GAA6C,YAAY;AACrD,SAAKG,eAAL,GAAuB,IAAvB;AACA,SAAKD,cAAL,GAAsB,IAAtB;AACH,GAHD;;AAIA,SAAOjB,eAAP;AACH,CA5KoC,EAArC;;AA6KAN,OAAO,CAACM,eAAR,GAA0BA,eAA1B","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar wrapConnectorHooks_1 = __importDefault(require(\"./wrapConnectorHooks\"));\nvar isRef_1 = require(\"../utils/isRef\");\nvar shallowequal_1 = __importDefault(require(\"shallowequal\"));\nvar SourceConnector = /** @class */ (function () {\n    function SourceConnector(backend) {\n        var _this = this;\n        this.hooks = wrapConnectorHooks_1.default({\n            dragSource: function (node, options) {\n                _this.clearDragSource();\n                _this.dragSourceOptions = options || null;\n                if (isRef_1.isRef(node)) {\n                    _this.dragSourceRef = node;\n                }\n                else {\n                    _this.dragSourceNode = node;\n                }\n                _this.reconnectDragSource();\n            },\n            dragPreview: function (node, options) {\n                _this.clearDragPreview();\n                _this.dragPreviewOptions = options || null;\n                if (isRef_1.isRef(node)) {\n                    _this.dragPreviewRef = node;\n                }\n                else {\n                    _this.dragPreviewNode = node;\n                }\n                _this.reconnectDragPreview();\n            },\n        });\n        this.handlerId = null;\n        // The drop target may either be attached via ref or connect function\n        this.dragSourceRef = null;\n        this.dragSourceOptionsInternal = null;\n        // The drag preview may either be attached via ref or connect function\n        this.dragPreviewRef = null;\n        this.dragPreviewOptionsInternal = null;\n        this.lastConnectedHandlerId = null;\n        this.lastConnectedDragSource = null;\n        this.lastConnectedDragSourceOptions = null;\n        this.lastConnectedDragPreview = null;\n        this.lastConnectedDragPreviewOptions = null;\n        this.backend = backend;\n    }\n    SourceConnector.prototype.receiveHandlerId = function (newHandlerId) {\n        if (this.handlerId === newHandlerId) {\n            return;\n        }\n        this.handlerId = newHandlerId;\n        this.reconnect();\n    };\n    Object.defineProperty(SourceConnector.prototype, \"connectTarget\", {\n        get: function () {\n            return this.dragSource;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SourceConnector.prototype, \"dragSourceOptions\", {\n        get: function () {\n            return this.dragSourceOptionsInternal;\n        },\n        set: function (options) {\n            this.dragSourceOptionsInternal = options;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SourceConnector.prototype, \"dragPreviewOptions\", {\n        get: function () {\n            return this.dragPreviewOptionsInternal;\n        },\n        set: function (options) {\n            this.dragPreviewOptionsInternal = options;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SourceConnector.prototype.reconnect = function () {\n        this.reconnectDragSource();\n        this.reconnectDragPreview();\n    };\n    SourceConnector.prototype.reconnectDragSource = function () {\n        var dragSource = this.dragSource;\n        // if nothing has changed then don't resubscribe\n        var didChange = this.didHandlerIdChange() ||\n            this.didConnectedDragSourceChange() ||\n            this.didDragSourceOptionsChange();\n        if (didChange) {\n            this.disconnectDragSource();\n        }\n        if (!this.handlerId) {\n            return;\n        }\n        if (!dragSource) {\n            this.lastConnectedDragSource = dragSource;\n            return;\n        }\n        if (didChange) {\n            this.lastConnectedHandlerId = this.handlerId;\n            this.lastConnectedDragSource = dragSource;\n            this.lastConnectedDragSourceOptions = this.dragSourceOptions;\n            this.dragSourceUnsubscribe = this.backend.connectDragSource(this.handlerId, dragSource, this.dragSourceOptions);\n        }\n    };\n    SourceConnector.prototype.reconnectDragPreview = function () {\n        var dragPreview = this.dragPreview;\n        // if nothing has changed then don't resubscribe\n        var didChange = this.didHandlerIdChange() ||\n            this.didConnectedDragPreviewChange() ||\n            this.didDragPreviewOptionsChange();\n        if (!this.handlerId) {\n            this.disconnectDragPreview();\n        }\n        else if (this.dragPreview && didChange) {\n            this.lastConnectedHandlerId = this.handlerId;\n            this.lastConnectedDragPreview = dragPreview;\n            this.lastConnectedDragPreviewOptions = this.dragPreviewOptions;\n            this.disconnectDragPreview();\n            this.dragPreviewUnsubscribe = this.backend.connectDragPreview(this.handlerId, dragPreview, this.dragPreviewOptions);\n        }\n    };\n    SourceConnector.prototype.didHandlerIdChange = function () {\n        return this.lastConnectedHandlerId !== this.handlerId;\n    };\n    SourceConnector.prototype.didConnectedDragSourceChange = function () {\n        return this.lastConnectedDragSource !== this.dragSource;\n    };\n    SourceConnector.prototype.didConnectedDragPreviewChange = function () {\n        return this.lastConnectedDragPreview !== this.dragPreview;\n    };\n    SourceConnector.prototype.didDragSourceOptionsChange = function () {\n        return !shallowequal_1.default(this.lastConnectedDragSourceOptions, this.dragSourceOptions);\n    };\n    SourceConnector.prototype.didDragPreviewOptionsChange = function () {\n        return !shallowequal_1.default(this.lastConnectedDragPreviewOptions, this.dragPreviewOptions);\n    };\n    SourceConnector.prototype.disconnectDragSource = function () {\n        if (this.dragSourceUnsubscribe) {\n            this.dragSourceUnsubscribe();\n            this.dragSourceUnsubscribe = undefined;\n        }\n    };\n    SourceConnector.prototype.disconnectDragPreview = function () {\n        if (this.dragPreviewUnsubscribe) {\n            this.dragPreviewUnsubscribe();\n            this.dragPreviewUnsubscribe = undefined;\n            this.dragPreviewNode = null;\n            this.dragPreviewRef = null;\n        }\n    };\n    Object.defineProperty(SourceConnector.prototype, \"dragSource\", {\n        get: function () {\n            return (this.dragSourceNode || (this.dragSourceRef && this.dragSourceRef.current));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SourceConnector.prototype, \"dragPreview\", {\n        get: function () {\n            return (this.dragPreviewNode ||\n                (this.dragPreviewRef && this.dragPreviewRef.current));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SourceConnector.prototype.clearDragSource = function () {\n        this.dragSourceNode = null;\n        this.dragSourceRef = null;\n    };\n    SourceConnector.prototype.clearDragPreview = function () {\n        this.dragPreviewNode = null;\n        this.dragPreviewRef = null;\n    };\n    return SourceConnector;\n}());\nexports.SourceConnector = SourceConnector;\n"]},"metadata":{},"sourceType":"script"}