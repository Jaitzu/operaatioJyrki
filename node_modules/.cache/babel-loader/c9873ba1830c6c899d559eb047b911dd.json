{"ast":null,"code":"//function for parsing the server reponse\nfunction parseJSON(response) {\n  if (response.status !== 200) {\n    if (response.headers.get('content-length') === null) {\n      const res = {\n        message: response.statusText,\n        title: response.status.toString()\n      };\n      throw res;\n    } else {\n      return response.json().then(json => {\n        const res = {\n          message: json.error[0].message,\n          title: json.error[0].level\n        };\n        throw res;\n      });\n    }\n  } else {\n    return response.json();\n  }\n}\n\nfunction parseResponseHeader(response) {\n  return response.headers;\n} //encoded rest call to server\n\n\nexport function fetchFromApi(url, headers) {\n  return fetch(encodeURI(url), {\n    credentials: 'include',\n    headers\n  }).then(parseJSON);\n}\nexport function fetchWrapper(url, cors) {\n  return fetch(encodeURI(url), {\n    credentials: 'include',\n    mode: cors\n  });\n} //function for fetching thcrf token from the server\n\nexport function fetchTokenFromApi(url) {\n  return fetch(encodeURI(url), {\n    credentials: 'include'\n  }).then(parseResponseHeader).then(headers => headers.get('x-csrf-token'));\n} //function for posting data to server\n\nexport function postToApi(url, settings) {\n  return fetch(encodeURI(url), settings).then(parseJSON);\n}\nexport function deleteFromApi(url, requestBody, requestHeaders) {\n  return fetch(encodeURI(url), {\n    method: 'DELETE',\n    body: JSON.stringify(requestBody),\n    headers: requestHeaders\n  }).then(parseJSON);\n}","map":{"version":3,"sources":["/home/janne/repot/OperaatioJyrki/src/stores/ApiServices.ts"],"names":["parseJSON","response","status","headers","get","res","message","statusText","title","toString","json","then","error","level","parseResponseHeader","fetchFromApi","url","fetch","encodeURI","credentials","fetchWrapper","cors","mode","fetchTokenFromApi","postToApi","settings","deleteFromApi","requestBody","requestHeaders","method","body","JSON","stringify"],"mappings":"AAAA;AACA,SAASA,SAAT,CAAmBC,QAAnB,EAAuC;AACnC,MAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzB,QAAID,QAAQ,CAACE,OAAT,CAAiBC,GAAjB,CAAqB,gBAArB,MAA2C,IAA/C,EAAqD;AACjD,YAAMC,GAAG,GAAG;AACRC,QAAAA,OAAO,EAAEL,QAAQ,CAACM,UADV;AAERC,QAAAA,KAAK,EAAGP,QAAQ,CAACC,MAAV,CAAkBO,QAAlB;AAFC,OAAZ;AAIA,YAAMJ,GAAN;AACH,KAND,MAMO;AACH,aAAOJ,QAAQ,CAACS,IAAT,GAAgBC,IAAhB,CAAsBD,IAAD,IAAe;AACvC,cAAML,GAAG,GAAG;AACRC,UAAAA,OAAO,EAAEI,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcN,OADf;AAERE,UAAAA,KAAK,EAAEE,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcC;AAFb,SAAZ;AAIA,cAAMR,GAAN;AACH,OANM,CAAP;AAOH;AACJ,GAhBD,MAgBO;AACH,WAAOJ,QAAQ,CAACS,IAAT,EAAP;AACH;AACJ;;AAGD,SAASI,mBAAT,CAA6Bb,QAA7B,EAA0D;AACtD,SAAOA,QAAQ,CAACE,OAAhB;AACH,C,CAED;;;AACA,OAAO,SAASY,YAAT,CAAsBC,GAAtB,EAAmCb,OAAnC,EAA0D;AAC7D,SAAOc,KAAK,CAACC,SAAS,CAACF,GAAD,CAAV,EAAiB;AAACG,IAAAA,WAAW,EAAE,SAAd;AAAyBhB,IAAAA;AAAzB,GAAjB,CAAL,CACFQ,IADE,CACGX,SADH,CAAP;AAEH;AAED,OAAO,SAASoB,YAAT,CAAsBJ,GAAtB,EAAmCK,IAAnC,EAAuD;AAC1D,SAAOJ,KAAK,CAACC,SAAS,CAACF,GAAD,CAAV,EAAiB;AAACG,IAAAA,WAAW,EAAE,SAAd;AAAyBG,IAAAA,IAAI,EAAED;AAA/B,GAAjB,CAAZ;AACH,C,CAED;;AACA,OAAO,SAASE,iBAAT,CAA2BP,GAA3B,EAAwC;AAC3C,SAAOC,KAAK,CAACC,SAAS,CAACF,GAAD,CAAV,EAAiB;AAACG,IAAAA,WAAW,EAAE;AAAd,GAAjB,CAAL,CACFR,IADE,CACGG,mBADH,EAEFH,IAFE,CAEGR,OAAO,IAAIA,OAAO,CAACC,GAAR,CAAY,cAAZ,CAFd,CAAP;AAGH,C,CACD;;AACA,OAAO,SAASoB,SAAT,CAAmBR,GAAnB,EAAgCS,QAAhC,EAA+C;AAClD,SAAOR,KAAK,CAACC,SAAS,CAACF,GAAD,CAAV,EAAiBS,QAAjB,CAAL,CACFd,IADE,CACGX,SADH,CAAP;AAEH;AAED,OAAO,SAAS0B,aAAT,CAAuBV,GAAvB,EAAoCW,WAApC,EAAsDC,cAAtD,EAAoF;AACvF,SAAOX,KAAK,CAACC,SAAS,CAACF,GAAD,CAAV,EAAiB;AAACa,IAAAA,MAAM,EAAE,QAAT;AAAmBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,WAAf,CAAzB;AAAsDxB,IAAAA,OAAO,EAAEyB;AAA/D,GAAjB,CAAL,CACFjB,IADE,CACGX,SADH,CAAP;AAEH","sourcesContent":["//function for parsing the server reponse\nfunction parseJSON(response: Response) {\n    if (response.status !== 200) {\n        if (response.headers.get('content-length') === null) {\n            const res = {\n                message: response.statusText,\n                title: (response.status).toString()\n            };\n            throw res\n        } else {\n            return response.json().then((json: any) => {\n                const res = {\n                    message: json.error[0].message,\n                    title: json.error[0].level\n                };\n                throw res\n            })\n        }\n    } else {\n        return response.json()\n    }\n}\n\n\nfunction parseResponseHeader(response: Response): Headers {\n    return response.headers;\n}\n\n//encoded rest call to server\nexport function fetchFromApi(url: string, headers?: HeadersInit) {\n    return fetch(encodeURI(url), {credentials: 'include', headers})\n        .then(parseJSON);\n}\n\nexport function fetchWrapper(url: string, cors?: RequestMode) {\n    return fetch(encodeURI(url), {credentials: 'include', mode: cors})\n}\n\n//function for fetching thcrf token from the server\nexport function fetchTokenFromApi(url: string) {\n    return fetch(encodeURI(url), {credentials: 'include'})\n        .then(parseResponseHeader)\n        .then(headers => headers.get('x-csrf-token'));\n}\n//function for posting data to server\nexport function postToApi(url: string, settings: any) {\n    return fetch(encodeURI(url), settings)\n        .then(parseJSON)\n}\n\nexport function deleteFromApi(url: string, requestBody: any, requestHeaders?: HeadersInit) {\n    return fetch(encodeURI(url), {method: 'DELETE', body: JSON.stringify(requestBody), headers: requestHeaders})\n        .then(parseJSON)\n}"]},"metadata":{},"sourceType":"module"}