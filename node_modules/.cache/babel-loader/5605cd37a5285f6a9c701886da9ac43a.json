{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar invariant_1 = __importDefault(require(\"invariant\"));\n\nvar matchesType_1 = __importDefault(require(\"./utils/matchesType\"));\n\nvar coords_1 = require(\"./utils/coords\");\n\nvar dirtiness_1 = require(\"./utils/dirtiness\");\n\nvar DragDropMonitorImpl =\n/** @class */\nfunction () {\n  function DragDropMonitorImpl(store, registry) {\n    this.store = store;\n    this.registry = registry;\n  }\n\n  DragDropMonitorImpl.prototype.subscribeToStateChange = function (listener, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {\n        handlerIds: undefined\n      };\n    }\n\n    var handlerIds = options.handlerIds;\n    invariant_1.default(typeof listener === 'function', 'listener must be a function.');\n    invariant_1.default(typeof handlerIds === 'undefined' || Array.isArray(handlerIds), 'handlerIds, when specified, must be an array of strings.');\n    var prevStateId = this.store.getState().stateId;\n\n    var handleChange = function () {\n      var state = _this.store.getState();\n\n      var currentStateId = state.stateId;\n\n      try {\n        var canSkipListener = currentStateId === prevStateId || currentStateId === prevStateId + 1 && !dirtiness_1.areDirty(state.dirtyHandlerIds, handlerIds);\n\n        if (!canSkipListener) {\n          listener();\n        }\n      } finally {\n        prevStateId = currentStateId;\n      }\n    };\n\n    return this.store.subscribe(handleChange);\n  };\n\n  DragDropMonitorImpl.prototype.subscribeToOffsetChange = function (listener) {\n    var _this = this;\n\n    invariant_1.default(typeof listener === 'function', 'listener must be a function.');\n    var previousState = this.store.getState().dragOffset;\n\n    var handleChange = function () {\n      var nextState = _this.store.getState().dragOffset;\n\n      if (nextState === previousState) {\n        return;\n      }\n\n      previousState = nextState;\n      listener();\n    };\n\n    return this.store.subscribe(handleChange);\n  };\n\n  DragDropMonitorImpl.prototype.canDragSource = function (sourceId) {\n    if (!sourceId) {\n      return false;\n    }\n\n    var source = this.registry.getSource(sourceId);\n    invariant_1.default(source, 'Expected to find a valid source.');\n\n    if (this.isDragging()) {\n      return false;\n    }\n\n    return source.canDrag(this, sourceId);\n  };\n\n  DragDropMonitorImpl.prototype.canDropOnTarget = function (targetId) {\n    // undefined on initial render\n    if (!targetId) {\n      return false;\n    }\n\n    var target = this.registry.getTarget(targetId);\n    invariant_1.default(target, 'Expected to find a valid target.');\n\n    if (!this.isDragging() || this.didDrop()) {\n      return false;\n    }\n\n    var targetType = this.registry.getTargetType(targetId);\n    var draggedItemType = this.getItemType();\n    return matchesType_1.default(targetType, draggedItemType) && target.canDrop(this, targetId);\n  };\n\n  DragDropMonitorImpl.prototype.isDragging = function () {\n    return Boolean(this.getItemType());\n  };\n\n  DragDropMonitorImpl.prototype.isDraggingSource = function (sourceId) {\n    // undefined on initial render\n    if (!sourceId) {\n      return false;\n    }\n\n    var source = this.registry.getSource(sourceId, true);\n    invariant_1.default(source, 'Expected to find a valid source.');\n\n    if (!this.isDragging() || !this.isSourcePublic()) {\n      return false;\n    }\n\n    var sourceType = this.registry.getSourceType(sourceId);\n    var draggedItemType = this.getItemType();\n\n    if (sourceType !== draggedItemType) {\n      return false;\n    }\n\n    return source.isDragging(this, sourceId);\n  };\n\n  DragDropMonitorImpl.prototype.isOverTarget = function (targetId, options) {\n    if (options === void 0) {\n      options = {\n        shallow: false\n      };\n    } // undefined on initial render\n\n\n    if (!targetId) {\n      return false;\n    }\n\n    var shallow = options.shallow;\n\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    var targetType = this.registry.getTargetType(targetId);\n    var draggedItemType = this.getItemType();\n\n    if (draggedItemType && !matchesType_1.default(targetType, draggedItemType)) {\n      return false;\n    }\n\n    var targetIds = this.getTargetIds();\n\n    if (!targetIds.length) {\n      return false;\n    }\n\n    var index = targetIds.indexOf(targetId);\n\n    if (shallow) {\n      return index === targetIds.length - 1;\n    } else {\n      return index > -1;\n    }\n  };\n\n  DragDropMonitorImpl.prototype.getItemType = function () {\n    return this.store.getState().dragOperation.itemType;\n  };\n\n  DragDropMonitorImpl.prototype.getItem = function () {\n    return this.store.getState().dragOperation.item;\n  };\n\n  DragDropMonitorImpl.prototype.getSourceId = function () {\n    return this.store.getState().dragOperation.sourceId;\n  };\n\n  DragDropMonitorImpl.prototype.getTargetIds = function () {\n    return this.store.getState().dragOperation.targetIds;\n  };\n\n  DragDropMonitorImpl.prototype.getDropResult = function () {\n    return this.store.getState().dragOperation.dropResult;\n  };\n\n  DragDropMonitorImpl.prototype.didDrop = function () {\n    return this.store.getState().dragOperation.didDrop;\n  };\n\n  DragDropMonitorImpl.prototype.isSourcePublic = function () {\n    return this.store.getState().dragOperation.isSourcePublic;\n  };\n\n  DragDropMonitorImpl.prototype.getInitialClientOffset = function () {\n    return this.store.getState().dragOffset.initialClientOffset;\n  };\n\n  DragDropMonitorImpl.prototype.getInitialSourceClientOffset = function () {\n    return this.store.getState().dragOffset.initialSourceClientOffset;\n  };\n\n  DragDropMonitorImpl.prototype.getClientOffset = function () {\n    return this.store.getState().dragOffset.clientOffset;\n  };\n\n  DragDropMonitorImpl.prototype.getSourceClientOffset = function () {\n    return coords_1.getSourceClientOffset(this.store.getState().dragOffset);\n  };\n\n  DragDropMonitorImpl.prototype.getDifferenceFromInitialOffset = function () {\n    return coords_1.getDifferenceFromInitialOffset(this.store.getState().dragOffset);\n  };\n\n  return DragDropMonitorImpl;\n}();\n\nexports.default = DragDropMonitorImpl;","map":{"version":3,"sources":["/home/janne/repot/OperaatioJyrki/node_modules/dnd-core-cjs/lib/DragDropMonitorImpl.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","invariant_1","require","matchesType_1","coords_1","dirtiness_1","DragDropMonitorImpl","store","registry","prototype","subscribeToStateChange","listener","options","_this","handlerIds","undefined","default","Array","isArray","prevStateId","getState","stateId","handleChange","state","currentStateId","canSkipListener","areDirty","dirtyHandlerIds","subscribe","subscribeToOffsetChange","previousState","dragOffset","nextState","canDragSource","sourceId","source","getSource","isDragging","canDrag","canDropOnTarget","targetId","target","getTarget","didDrop","targetType","getTargetType","draggedItemType","getItemType","canDrop","Boolean","isDraggingSource","isSourcePublic","sourceType","getSourceType","isOverTarget","shallow","targetIds","getTargetIds","length","index","indexOf","dragOperation","itemType","getItem","item","getSourceId","getDropResult","dropResult","getInitialClientOffset","initialClientOffset","getInitialSourceClientOffset","initialSourceClientOffset","getClientOffset","clientOffset","getSourceClientOffset","getDifferenceFromInitialOffset"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar invariant_1 = __importDefault(require(\"invariant\"));\nvar matchesType_1 = __importDefault(require(\"./utils/matchesType\"));\nvar coords_1 = require(\"./utils/coords\");\nvar dirtiness_1 = require(\"./utils/dirtiness\");\nvar DragDropMonitorImpl = /** @class */ (function () {\n    function DragDropMonitorImpl(store, registry) {\n        this.store = store;\n        this.registry = registry;\n    }\n    DragDropMonitorImpl.prototype.subscribeToStateChange = function (listener, options) {\n        var _this = this;\n        if (options === void 0) { options = { handlerIds: undefined }; }\n        var handlerIds = options.handlerIds;\n        invariant_1.default(typeof listener === 'function', 'listener must be a function.');\n        invariant_1.default(typeof handlerIds === 'undefined' || Array.isArray(handlerIds), 'handlerIds, when specified, must be an array of strings.');\n        var prevStateId = this.store.getState().stateId;\n        var handleChange = function () {\n            var state = _this.store.getState();\n            var currentStateId = state.stateId;\n            try {\n                var canSkipListener = currentStateId === prevStateId ||\n                    (currentStateId === prevStateId + 1 &&\n                        !dirtiness_1.areDirty(state.dirtyHandlerIds, handlerIds));\n                if (!canSkipListener) {\n                    listener();\n                }\n            }\n            finally {\n                prevStateId = currentStateId;\n            }\n        };\n        return this.store.subscribe(handleChange);\n    };\n    DragDropMonitorImpl.prototype.subscribeToOffsetChange = function (listener) {\n        var _this = this;\n        invariant_1.default(typeof listener === 'function', 'listener must be a function.');\n        var previousState = this.store.getState().dragOffset;\n        var handleChange = function () {\n            var nextState = _this.store.getState().dragOffset;\n            if (nextState === previousState) {\n                return;\n            }\n            previousState = nextState;\n            listener();\n        };\n        return this.store.subscribe(handleChange);\n    };\n    DragDropMonitorImpl.prototype.canDragSource = function (sourceId) {\n        if (!sourceId) {\n            return false;\n        }\n        var source = this.registry.getSource(sourceId);\n        invariant_1.default(source, 'Expected to find a valid source.');\n        if (this.isDragging()) {\n            return false;\n        }\n        return source.canDrag(this, sourceId);\n    };\n    DragDropMonitorImpl.prototype.canDropOnTarget = function (targetId) {\n        // undefined on initial render\n        if (!targetId) {\n            return false;\n        }\n        var target = this.registry.getTarget(targetId);\n        invariant_1.default(target, 'Expected to find a valid target.');\n        if (!this.isDragging() || this.didDrop()) {\n            return false;\n        }\n        var targetType = this.registry.getTargetType(targetId);\n        var draggedItemType = this.getItemType();\n        return (matchesType_1.default(targetType, draggedItemType) && target.canDrop(this, targetId));\n    };\n    DragDropMonitorImpl.prototype.isDragging = function () {\n        return Boolean(this.getItemType());\n    };\n    DragDropMonitorImpl.prototype.isDraggingSource = function (sourceId) {\n        // undefined on initial render\n        if (!sourceId) {\n            return false;\n        }\n        var source = this.registry.getSource(sourceId, true);\n        invariant_1.default(source, 'Expected to find a valid source.');\n        if (!this.isDragging() || !this.isSourcePublic()) {\n            return false;\n        }\n        var sourceType = this.registry.getSourceType(sourceId);\n        var draggedItemType = this.getItemType();\n        if (sourceType !== draggedItemType) {\n            return false;\n        }\n        return source.isDragging(this, sourceId);\n    };\n    DragDropMonitorImpl.prototype.isOverTarget = function (targetId, options) {\n        if (options === void 0) { options = { shallow: false }; }\n        // undefined on initial render\n        if (!targetId) {\n            return false;\n        }\n        var shallow = options.shallow;\n        if (!this.isDragging()) {\n            return false;\n        }\n        var targetType = this.registry.getTargetType(targetId);\n        var draggedItemType = this.getItemType();\n        if (draggedItemType && !matchesType_1.default(targetType, draggedItemType)) {\n            return false;\n        }\n        var targetIds = this.getTargetIds();\n        if (!targetIds.length) {\n            return false;\n        }\n        var index = targetIds.indexOf(targetId);\n        if (shallow) {\n            return index === targetIds.length - 1;\n        }\n        else {\n            return index > -1;\n        }\n    };\n    DragDropMonitorImpl.prototype.getItemType = function () {\n        return this.store.getState().dragOperation.itemType;\n    };\n    DragDropMonitorImpl.prototype.getItem = function () {\n        return this.store.getState().dragOperation.item;\n    };\n    DragDropMonitorImpl.prototype.getSourceId = function () {\n        return this.store.getState().dragOperation.sourceId;\n    };\n    DragDropMonitorImpl.prototype.getTargetIds = function () {\n        return this.store.getState().dragOperation.targetIds;\n    };\n    DragDropMonitorImpl.prototype.getDropResult = function () {\n        return this.store.getState().dragOperation.dropResult;\n    };\n    DragDropMonitorImpl.prototype.didDrop = function () {\n        return this.store.getState().dragOperation.didDrop;\n    };\n    DragDropMonitorImpl.prototype.isSourcePublic = function () {\n        return this.store.getState().dragOperation.isSourcePublic;\n    };\n    DragDropMonitorImpl.prototype.getInitialClientOffset = function () {\n        return this.store.getState().dragOffset.initialClientOffset;\n    };\n    DragDropMonitorImpl.prototype.getInitialSourceClientOffset = function () {\n        return this.store.getState().dragOffset.initialSourceClientOffset;\n    };\n    DragDropMonitorImpl.prototype.getClientOffset = function () {\n        return this.store.getState().dragOffset.clientOffset;\n    };\n    DragDropMonitorImpl.prototype.getSourceClientOffset = function () {\n        return coords_1.getSourceClientOffset(this.store.getState().dragOffset);\n    };\n    DragDropMonitorImpl.prototype.getDifferenceFromInitialOffset = function () {\n        return coords_1.getDifferenceFromInitialOffset(this.store.getState().dragOffset);\n    };\n    return DragDropMonitorImpl;\n}());\nexports.default = DragDropMonitorImpl;\n"]},"metadata":{},"sourceType":"script"}