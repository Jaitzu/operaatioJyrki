{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar js_utils_1 = require(\"../utils/js_utils\");\n/**\n * Provides a set of static methods for creating Disposables.\n * @param {Function} action Action to run during the first call to dispose.\n * The action is guaranteed to be run at most once.\n */\n\n\nvar Disposable =\n/** @class */\nfunction () {\n  function Disposable(action) {\n    this.isDisposed = false;\n    this.action = js_utils_1.isFunction(action) ? action : js_utils_1.noop;\n  }\n  /**\n   * Validates whether the given object is a disposable\n   * @param {Object} Object to test whether it has a dispose method\n   * @returns {Boolean} true if a disposable object, else false.\n   */\n\n\n  Disposable.isDisposable = function (d) {\n    return d && js_utils_1.isFunction(d.dispose);\n  };\n\n  Disposable._fixup = function (result) {\n    return Disposable.isDisposable(result) ? result : Disposable.empty;\n  };\n  /**\n   * Creates a disposable object that invokes the specified action when disposed.\n   * @param {Function} dispose Action to run during the first call to dispose.\n   * The action is guaranteed to be run at most once.\n   * @return {Disposable} The disposable object that runs the given action upon disposal.\n   */\n\n\n  Disposable.create = function (action) {\n    return new Disposable(action);\n  };\n  /** Performs the task of cleaning up resources. */\n\n\n  Disposable.prototype.dispose = function () {\n    if (!this.isDisposed) {\n      this.action();\n      this.isDisposed = true;\n    }\n  };\n  /**\n   * Gets the disposable that does nothing when disposed.\n   */\n\n\n  Disposable.empty = {\n    dispose: js_utils_1.noop\n  };\n  return Disposable;\n}();\n\nexports.Disposable = Disposable;\n/**\n * Represents a group of disposable resources that are disposed together.\n * @constructor\n */\n\nvar CompositeDisposable =\n/** @class */\nfunction () {\n  function CompositeDisposable() {\n    var disposables = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      disposables[_i] = arguments[_i];\n    }\n\n    this.isDisposed = false;\n    this.disposables = disposables;\n  }\n  /**\n   * Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.\n   * @param {Any} item Disposable to add.\n   */\n\n\n  CompositeDisposable.prototype.add = function (item) {\n    if (this.isDisposed) {\n      item.dispose();\n    } else {\n      this.disposables.push(item);\n    }\n  };\n  /**\n   * Removes and disposes the first occurrence of a disposable from the CompositeDisposable.\n   * @param {Any} item Disposable to remove.\n   * @returns {Boolean} true if found; false otherwise.\n   */\n\n\n  CompositeDisposable.prototype.remove = function (item) {\n    var shouldDispose = false;\n\n    if (!this.isDisposed) {\n      var idx = this.disposables.indexOf(item);\n\n      if (idx !== -1) {\n        shouldDispose = true;\n        this.disposables.splice(idx, 1);\n        item.dispose();\n      }\n    }\n\n    return shouldDispose;\n  };\n  /**\n   *  Disposes all disposables in the group and removes them from the group but\n   *  does not dispose the CompositeDisposable.\n   */\n\n\n  CompositeDisposable.prototype.clear = function () {\n    if (!this.isDisposed) {\n      var len = this.disposables.length;\n      var currentDisposables = new Array(len);\n\n      for (var i = 0; i < len; i++) {\n        currentDisposables[i] = this.disposables[i];\n      }\n\n      this.disposables = [];\n\n      for (var i = 0; i < len; i++) {\n        currentDisposables[i].dispose();\n      }\n    }\n  };\n  /**\n   *  Disposes all disposables in the group and removes them from the group.\n   */\n\n\n  CompositeDisposable.prototype.dispose = function () {\n    if (!this.isDisposed) {\n      this.isDisposed = true;\n      var len = this.disposables.length;\n      var currentDisposables = new Array(len);\n\n      for (var i = 0; i < len; i++) {\n        currentDisposables[i] = this.disposables[i];\n      }\n\n      this.disposables = [];\n\n      for (var i = 0; i < len; i++) {\n        currentDisposables[i].dispose();\n      }\n    }\n  };\n\n  return CompositeDisposable;\n}();\n\nexports.CompositeDisposable = CompositeDisposable;\n/**\n * Represents a disposable resource whose underlying disposable resource can\n * be replaced by another disposable resource, causing automatic disposal of\n * the previous underlying disposable resource.\n */\n\nvar SerialDisposable =\n/** @class */\nfunction () {\n  function SerialDisposable() {\n    this.isDisposed = false;\n  }\n  /**\n   * Gets the underlying disposable.\n   * @returns {Any} the underlying disposable.\n   */\n\n\n  SerialDisposable.prototype.getDisposable = function () {\n    return this.current;\n  };\n\n  SerialDisposable.prototype.setDisposable = function (value) {\n    var shouldDispose = this.isDisposed;\n\n    if (!shouldDispose) {\n      var old = this.current;\n      this.current = value;\n\n      if (old) {\n        old.dispose();\n      }\n    }\n\n    if (shouldDispose && value) {\n      value.dispose();\n    }\n  };\n  /** Performs the task of cleaning up resources. */\n\n\n  SerialDisposable.prototype.dispose = function () {\n    if (!this.isDisposed) {\n      this.isDisposed = true;\n      var old = this.current;\n      this.current = undefined;\n\n      if (old) {\n        old.dispose();\n      }\n    }\n  };\n\n  return SerialDisposable;\n}();\n\nexports.SerialDisposable = SerialDisposable;","map":{"version":3,"sources":["/home/janne/repot/OperaatioJyrki/node_modules/react-dnd-cjs/lib/decorators/disposables.js"],"names":["Object","defineProperty","exports","value","js_utils_1","require","Disposable","action","isDisposed","isFunction","noop","isDisposable","d","dispose","_fixup","result","empty","create","prototype","CompositeDisposable","disposables","_i","arguments","length","add","item","push","remove","shouldDispose","idx","indexOf","splice","clear","len","currentDisposables","Array","i","SerialDisposable","getDisposable","current","setDisposable","old","undefined"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar js_utils_1 = require(\"../utils/js_utils\");\n/**\n * Provides a set of static methods for creating Disposables.\n * @param {Function} action Action to run during the first call to dispose.\n * The action is guaranteed to be run at most once.\n */\nvar Disposable = /** @class */ (function () {\n    function Disposable(action) {\n        this.isDisposed = false;\n        this.action = js_utils_1.isFunction(action) ? action : js_utils_1.noop;\n    }\n    /**\n     * Validates whether the given object is a disposable\n     * @param {Object} Object to test whether it has a dispose method\n     * @returns {Boolean} true if a disposable object, else false.\n     */\n    Disposable.isDisposable = function (d) {\n        return d && js_utils_1.isFunction(d.dispose);\n    };\n    Disposable._fixup = function (result) {\n        return Disposable.isDisposable(result) ? result : Disposable.empty;\n    };\n    /**\n     * Creates a disposable object that invokes the specified action when disposed.\n     * @param {Function} dispose Action to run during the first call to dispose.\n     * The action is guaranteed to be run at most once.\n     * @return {Disposable} The disposable object that runs the given action upon disposal.\n     */\n    Disposable.create = function (action) {\n        return new Disposable(action);\n    };\n    /** Performs the task of cleaning up resources. */\n    Disposable.prototype.dispose = function () {\n        if (!this.isDisposed) {\n            this.action();\n            this.isDisposed = true;\n        }\n    };\n    /**\n     * Gets the disposable that does nothing when disposed.\n     */\n    Disposable.empty = { dispose: js_utils_1.noop };\n    return Disposable;\n}());\nexports.Disposable = Disposable;\n/**\n * Represents a group of disposable resources that are disposed together.\n * @constructor\n */\nvar CompositeDisposable = /** @class */ (function () {\n    function CompositeDisposable() {\n        var disposables = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            disposables[_i] = arguments[_i];\n        }\n        this.isDisposed = false;\n        this.disposables = disposables;\n    }\n    /**\n     * Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.\n     * @param {Any} item Disposable to add.\n     */\n    CompositeDisposable.prototype.add = function (item) {\n        if (this.isDisposed) {\n            item.dispose();\n        }\n        else {\n            this.disposables.push(item);\n        }\n    };\n    /**\n     * Removes and disposes the first occurrence of a disposable from the CompositeDisposable.\n     * @param {Any} item Disposable to remove.\n     * @returns {Boolean} true if found; false otherwise.\n     */\n    CompositeDisposable.prototype.remove = function (item) {\n        var shouldDispose = false;\n        if (!this.isDisposed) {\n            var idx = this.disposables.indexOf(item);\n            if (idx !== -1) {\n                shouldDispose = true;\n                this.disposables.splice(idx, 1);\n                item.dispose();\n            }\n        }\n        return shouldDispose;\n    };\n    /**\n     *  Disposes all disposables in the group and removes them from the group but\n     *  does not dispose the CompositeDisposable.\n     */\n    CompositeDisposable.prototype.clear = function () {\n        if (!this.isDisposed) {\n            var len = this.disposables.length;\n            var currentDisposables = new Array(len);\n            for (var i = 0; i < len; i++) {\n                currentDisposables[i] = this.disposables[i];\n            }\n            this.disposables = [];\n            for (var i = 0; i < len; i++) {\n                currentDisposables[i].dispose();\n            }\n        }\n    };\n    /**\n     *  Disposes all disposables in the group and removes them from the group.\n     */\n    CompositeDisposable.prototype.dispose = function () {\n        if (!this.isDisposed) {\n            this.isDisposed = true;\n            var len = this.disposables.length;\n            var currentDisposables = new Array(len);\n            for (var i = 0; i < len; i++) {\n                currentDisposables[i] = this.disposables[i];\n            }\n            this.disposables = [];\n            for (var i = 0; i < len; i++) {\n                currentDisposables[i].dispose();\n            }\n        }\n    };\n    return CompositeDisposable;\n}());\nexports.CompositeDisposable = CompositeDisposable;\n/**\n * Represents a disposable resource whose underlying disposable resource can\n * be replaced by another disposable resource, causing automatic disposal of\n * the previous underlying disposable resource.\n */\nvar SerialDisposable = /** @class */ (function () {\n    function SerialDisposable() {\n        this.isDisposed = false;\n    }\n    /**\n     * Gets the underlying disposable.\n     * @returns {Any} the underlying disposable.\n     */\n    SerialDisposable.prototype.getDisposable = function () {\n        return this.current;\n    };\n    SerialDisposable.prototype.setDisposable = function (value) {\n        var shouldDispose = this.isDisposed;\n        if (!shouldDispose) {\n            var old = this.current;\n            this.current = value;\n            if (old) {\n                old.dispose();\n            }\n        }\n        if (shouldDispose && value) {\n            value.dispose();\n        }\n    };\n    /** Performs the task of cleaning up resources. */\n    SerialDisposable.prototype.dispose = function () {\n        if (!this.isDisposed) {\n            this.isDisposed = true;\n            var old = this.current;\n            this.current = undefined;\n            if (old) {\n                old.dispose();\n            }\n        }\n    };\n    return SerialDisposable;\n}());\nexports.SerialDisposable = SerialDisposable;\n"]},"metadata":{},"sourceType":"script"}