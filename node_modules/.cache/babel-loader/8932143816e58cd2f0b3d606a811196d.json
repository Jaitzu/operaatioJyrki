{"ast":null,"code":"var _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/home/janne/repot/OperaatioJyrki/src/components/YearlySafetyAmountList/PrintoutAnnouncement.tsx\";\n\nimport * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./PrintoutAnnouncement.scss\";\nimport { Button, Col, Form, FormGroup, Input, Label, Row, InputGroupAddon, InputGroup } from \"reactstrap\";\nimport { inject, observer } from \"mobx-react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Calendar from \"../../../../assets/svg/Calendar.svg\";\nimport AnnouncementReceiversTable from \"./YearlySafetyAmountList\";\nimport MultiBackend from \"react-dnd-multi-backend\";\nimport HTML5toTouch from \"react-dnd-multi-backend/lib/HTML5toTouch\";\nimport { DndProvider } from \"react-dnd\";\nlet PrintoutAnnouncement = (_dec = inject('operationStore', 'printOutStore'), _dec(_class = observer(_class = (_temp = class PrintoutAnnouncement extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.isDisabled = () => {\n      if (this.state.printExecDate !== null && this.state.xml !== undefined && this.state.orders.length >= 1) {\n        return false;\n      } else {\n        return true;\n      }\n    };\n\n    this.submit = evt => {\n      evt.preventDefault();\n      const printExecDate = this.state.printExecDate.getFullYear() + '-' + ('0' + (this.state.printExecDate.getMonth() + 1)).slice(-2) + '-' + ('0' + this.state.printExecDate.getDate()).slice(-2);\n      const data = {\n        orders: this.state.orders,\n        printExecDate: printExecDate,\n        xml: this.state.xml,\n        allReceivers: this.state.allReceivers\n      };\n      this.props.operationStore.setDefineAnnouncement(data);\n    };\n\n    this.handleCheckedState = (variable, sendtoreceivers) => {\n      this.setState(prevState => ({ ...prevState,\n        allReceivers: {\n          checked: variable,\n          sendtoreceivers: sendtoreceivers\n        }\n      }));\n    };\n\n    this.updateOrders = (orders, variable) => {\n      if (variable === \"newColumn\") {\n        this.setState(prevState => ({ ...prevState,\n          orders: [...prevState.orders, orders]\n        }));\n      } else {\n        this.setState(prevState => ({ ...prevState,\n          orders: orders\n        }));\n      }\n    };\n\n    this.setXml = evt => {\n      const value = evt.target.value;\n      this.setState(prevState => ({ ...prevState,\n        xml: value + \".xml\"\n      }));\n    };\n\n    this.setDate = date => {\n      this.setState(prevState => ({ ...prevState,\n        printExecDate: date\n      }));\n    };\n\n    this.state = {\n      orders: [{\n        order: 1,\n        receiver: \"POLICYHOLDER\"\n      }],\n      printExecDate: new Date(),\n      xml: undefined,\n      allReceivers: {\n        checked: false,\n        sendToReceivers: \"First one found\"\n      }\n    };\n  } //function for disabling the next button\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"printout-announcement-view\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"printout-announcement-view__receivers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"printout-announcement-view__receivers-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Receivers\")), React.createElement(\"div\", {\n      className: \"printout-announcement-view__receivers-table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(DndProvider, {\n      backend: MultiBackend,\n      options: HTML5toTouch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(AnnouncementReceiversTable, {\n      orders: this.state.orders,\n      updateOrders: this.updateOrders,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"printout-announcement-view__form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.submit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(Label, {\n      className: \"printout-announcement-view__form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Send to receivers\"), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      className: \"printout-announcement-view__form-check\",\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Input, {\n      id: \"sendToReceiversFirstOneFoundRadioButton\",\n      onClick: () => {\n        this.handleCheckedState(false, \"First one found\");\n      },\n      checked: !this.state.allReceivers.checked,\n      type: \"radio\",\n      name: \"radio1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), ' ', \"First one found\"), React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Input, {\n      id: \"sendToReceiversAllFoundRadioButton\",\n      checked: this.state.allReceivers.checked,\n      onClick: () => {\n        this.handleCheckedState(true, \"All found\");\n      },\n      type: \"radio\",\n      name: \"radio1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), ' ', \"All found\"))), React.createElement(Col, {\n      md: 9,\n      lg: 7,\n      xl: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      className: \"printout-announcement-view__form-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(InputGroup, {\n      className: \"printout-announcement-view__form-input-execution\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Print execution date\"), React.createElement(Col, {\n      className: \"printout-announcement-view__form-input-execution-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(DatePicker, {\n      className: \"printout-account-statement-view__input-container-dateinput\",\n      placeholderText: \"       /   /     \",\n      name: \"printExecutionDate\",\n      dateFormat: \"dd/MM/yyyy\",\n      selected: this.state.printExecDate,\n      onChange: date => {\n        this.setDate(date);\n      },\n      strictParsing: true,\n      id: \"printExecutionDateInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(InputGroupAddon, {\n      addonType: \"append\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"printout-announcement-view__calendarlogo\",\n      src: Calendar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    })))), React.createElement(InputGroup, {\n      className: \"printout-announcement-view__form-input-attribute\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"Printout attribute\"), React.createElement(Col, {\n      className: \"printout-announcement-view__form-input-attribute-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Input, {\n      className: \"printout-announcement-view__form-input-attribute-container-xmlinput\",\n      name: \"printExecutionDate\",\n      type: \"text\",\n      onChange: evt => {\n        this.setXml(evt);\n      },\n      id: \"printoutAttributeInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(InputGroupAddon, {\n      addonType: \"append\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \".xml\"))))))), React.createElement(Link, {\n      id: \"nextPageButton\",\n      to: \"/confirmation\",\n      onFocus: evt => {\n        this.submit(evt);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(Button, {\n      disabled: this.isDisabled(),\n      className: \"select-mass-operation-view__nextbutton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Next\"))));\n  }\n\n}, _temp)) || _class) || _class);\nexport default PrintoutAnnouncement;","map":{"version":3,"sources":["/home/janne/repot/OperaatioJyrki/src/components/YearlySafetyAmountList/PrintoutAnnouncement.tsx"],"names":["React","Link","Button","Col","Form","FormGroup","Input","Label","Row","InputGroupAddon","InputGroup","inject","observer","DatePicker","AnnouncementReceiversTable","MultiBackend","HTML5toTouch","DndProvider","PrintoutAnnouncement","Component","constructor","props","isDisabled","state","printExecDate","xml","undefined","orders","length","submit","evt","preventDefault","getFullYear","getMonth","slice","getDate","data","allReceivers","operationStore","setDefineAnnouncement","handleCheckedState","variable","sendtoreceivers","setState","prevState","checked","updateOrders","setXml","value","target","setDate","date","order","receiver","Date","sendToReceivers","render","Calendar"],"mappings":"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","sourcesContent":["import * as  React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport \"./PrintoutAnnouncement.scss\"\nimport {Button, Col, Form, FormGroup, Input, Label, Row, InputGroupAddon, InputGroup} from \"reactstrap\";\nimport {inject, observer} from \"mobx-react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport {IOperationStore, IPrintOutStore} from \"../../../../stores/types\";\nimport Calendar from \"../../../../assets/svg/Calendar.svg\";\nimport AnnouncementReceiversTable from \"./YearlySafetyAmountList\"\nimport MultiBackend from \"react-dnd-multi-backend\";\nimport HTML5toTouch from \"react-dnd-multi-backend/lib/HTML5toTouch\";\nimport {DndProvider} from \"react-dnd\";\n\ninterface OperationProps{\n    operationStore?:IOperationStore,\n    printOutStore?:IPrintOutStore,\n}\n\ninterface IState {\n    orders: any[],\n    printExecDate: any,\n    xml: any;\n    allReceivers: any,\n}\n\n@inject('operationStore','printOutStore')\n@observer\nclass PrintoutAnnouncement extends React.Component<OperationProps, IState> {\n    constructor(props: OperationProps) {\n        super(props);\n        this.state = {\n            orders: [{order: 1, receiver: \"POLICYHOLDER\"}],\n            printExecDate: new Date(),\n            xml: undefined,\n            allReceivers: {checked: false, sendToReceivers: \"First one found\"}\n        }\n    }\n\n\n//function for disabling the next button\n    isDisabled=()=>{\n        if(this.state.printExecDate !== null && this.state.xml !== undefined && this.state.orders.length >= 1){\n            return false\n        }else{\n            return true\n        }\n    }\n    //function for submitting data to the operationstore\n    submit=(evt:any)=>{\n        evt.preventDefault();\n        const printExecDate = this.state.printExecDate.getFullYear() + '-' + (('0' + (this.state.printExecDate.getMonth() + 1)).slice(-2)) + '-' + ('0' + this.state.printExecDate.getDate()).slice(-2);\n        const data = {\n            orders: this.state.orders,\n            printExecDate: printExecDate,\n            xml: this.state.xml,\n            allReceivers: this.state.allReceivers\n        };\n        this.props.operationStore!.setDefineAnnouncement(data)\n    };\n\n//function for updating the allReceivers state variable\nhandleCheckedState=(variable:boolean,sendtoreceivers:any)=>{\n        this.setState((prevState:any)=>({\n\n            ...prevState,\n                allReceivers: {\n                    checked: variable,\n                    sendtoreceivers: sendtoreceivers\n                }\n\n        }))\n\n}\n//function for updating the orders state variable\nupdateOrders=(orders:any,variable:string)=>{\n    if(variable === \"newColumn\"){\n        this.setState((prevState:any)=>({\n                ...prevState,\n                orders: [...prevState.orders, orders]\n\n        }))\n    }else {\n        this.setState((prevState: any) => ({\n            ...prevState,\n                orders: orders\n        }))\n    }\n\n}\n//function for updating the xml state variable\nsetXml=(evt:any)=>{\n    const value=evt.target.value\n    this.setState((prevState:any)=>({\n        ...prevState,\n            xml: value + \".xml\",\n    }))\n\n}\n//function for updating the date state variable\n    setDate=(date:any)=>{\n            this.setState((prevState:any)=>({\n                ...prevState,\n                    printExecDate: date,\n            }))\n    }\n\n    render(){\n    return (\n        <div className=\"printout-announcement-view\">\n        <div className={\"printout-announcement-view__receivers\"}>\n            <div className={\"printout-announcement-view__receivers-header\"}>\n                <p>Receivers</p>\n            </div>\n            <div className={\"printout-announcement-view__receivers-table\"}>\n                <DndProvider backend={MultiBackend} options={HTML5toTouch}>\n<AnnouncementReceiversTable orders={this.state.orders} updateOrders={this.updateOrders}/>\n                </DndProvider>\n            </div>\n        </div>\n            <div className={\"printout-announcement-view__form\"}>\n                <Form onSubmit={this.submit}>\n                    <Label className={\"printout-announcement-view__form-label\"}>Send to receivers</Label>\n                    <Row>\n                        <Col md={3}>\n                    <FormGroup className={\"printout-announcement-view__form-check\"} check>\n                        <Label>\n                            <Input id={\"sendToReceiversFirstOneFoundRadioButton\"} onClick={() => {\n                                this.handleCheckedState(false,\"First one found\")}}  checked={!this.state.allReceivers.checked} type=\"radio\" name=\"radio1\"/>{' '}\n                            First one found\n                        </Label>\n                        <Label >\n                            <Input id={\"sendToReceiversAllFoundRadioButton\"} checked={this.state.allReceivers.checked} onClick={() => {\n                                this.handleCheckedState(true,\"All found\")\n                            }} type=\"radio\" name=\"radio1\"/>{' '}\n                            All found\n                        </Label>\n                    </FormGroup>\n                        </Col>\n                        <Col md={9} lg={7} xl={4}>\n                    <FormGroup className={\"printout-announcement-view__form-input\"} >\n                            <InputGroup className={\"printout-announcement-view__form-input-execution\"}>\n                                    <Label>Print execution date</Label>\n                                <Col className=\"printout-announcement-view__form-input-execution-container\">\n                                    <DatePicker className=\"printout-account-statement-view__input-container-dateinput\"\n                                                placeholderText={\"       /   /     \"}\n                                                name={\"printExecutionDate\"}\n                                                dateFormat={\"dd/MM/yyyy\"}\n                                                selected={this.state.printExecDate}\n                                                onChange={(date:any)=>{\n                                                    this.setDate(date)}}\n                                                strictParsing\n                                                id={\"printExecutionDateInput\"}\n                                    />\n                                    <InputGroupAddon addonType=\"append\">\n                                        <img className={\"printout-announcement-view__calendarlogo\"} src={Calendar}/>\n                                    </InputGroupAddon>\n                                </Col>\n                            </InputGroup>\n                            <InputGroup className={\"printout-announcement-view__form-input-attribute\"}>\n                            <Label>Printout attribute</Label>\n                                <Col className=\"printout-announcement-view__form-input-attribute-container\">\n                                    <Input className=\"printout-announcement-view__form-input-attribute-container-xmlinput\"                                                 name={\"printExecutionDate\"}\n                                           type=\"text\"\n                                           onChange={(evt:any)=>{this.setXml(evt)}}\n                                           id={\"printoutAttributeInput\"}\n                                    />\n                                    <InputGroupAddon addonType=\"append\">.xml</InputGroupAddon>\n                                </Col>\n                            </InputGroup>\n                    </FormGroup>\n                        </Col>\n                    </Row>\n                </Form>\n                <Link id={\"nextPageButton\"} to=\"/confirmation\" onFocus={(evt:any)=>{this.submit(evt)}}><Button disabled={this.isDisabled()} className=\"select-mass-operation-view__nextbutton\">Next</Button></Link>\n            </div>\n\n        </div>\n    )}\n}\n\n\nexport default PrintoutAnnouncement;\n\n\n"]},"metadata":{},"sourceType":"module"}