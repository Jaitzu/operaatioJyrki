{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar asap_1 = __importDefault(require(\"asap\"));\n\nvar invariant_1 = __importDefault(require(\"invariant\"));\n\nvar registry_1 = require(\"./actions/registry\");\n\nvar getNextUniqueId_1 = __importDefault(require(\"./utils/getNextUniqueId\"));\n\nvar interfaces_1 = require(\"./interfaces\");\n\nvar contracts_1 = require(\"./contracts\");\n\nfunction getNextHandlerId(role) {\n  var id = getNextUniqueId_1.default().toString();\n\n  switch (role) {\n    case interfaces_1.HandlerRole.SOURCE:\n      return \"S\" + id;\n\n    case interfaces_1.HandlerRole.TARGET:\n      return \"T\" + id;\n\n    default:\n      throw new Error(\"Unknown Handler Role: \" + role);\n  }\n}\n\nfunction parseRoleFromHandlerId(handlerId) {\n  switch (handlerId[0]) {\n    case 'S':\n      return interfaces_1.HandlerRole.SOURCE;\n\n    case 'T':\n      return interfaces_1.HandlerRole.TARGET;\n\n    default:\n      invariant_1.default(false, \"Cannot parse handler ID: \" + handlerId);\n  }\n}\n\nfunction mapContainsValue(map, searchValue) {\n  var entries = map.entries();\n  var isDone = false;\n\n  do {\n    var _a = entries.next(),\n        done = _a.done,\n        _b = _a.value,\n        value = _b[1];\n\n    if (value === searchValue) {\n      return true;\n    }\n\n    isDone = !!done;\n  } while (!isDone);\n\n  return false;\n}\n\nvar HandlerRegistryImpl =\n/** @class */\nfunction () {\n  function HandlerRegistryImpl(store) {\n    this.types = new Map();\n    this.dragSources = new Map();\n    this.dropTargets = new Map();\n    this.pinnedSourceId = null;\n    this.pinnedSource = null;\n    this.store = store;\n  }\n\n  HandlerRegistryImpl.prototype.addSource = function (type, source) {\n    contracts_1.validateType(type);\n    contracts_1.validateSourceContract(source);\n    var sourceId = this.addHandler(interfaces_1.HandlerRole.SOURCE, type, source);\n    this.store.dispatch(registry_1.addSource(sourceId));\n    return sourceId;\n  };\n\n  HandlerRegistryImpl.prototype.addTarget = function (type, target) {\n    contracts_1.validateType(type, true);\n    contracts_1.validateTargetContract(target);\n    var targetId = this.addHandler(interfaces_1.HandlerRole.TARGET, type, target);\n    this.store.dispatch(registry_1.addTarget(targetId));\n    return targetId;\n  };\n\n  HandlerRegistryImpl.prototype.containsHandler = function (handler) {\n    return mapContainsValue(this.dragSources, handler) || mapContainsValue(this.dropTargets, handler);\n  };\n\n  HandlerRegistryImpl.prototype.getSource = function (sourceId, includePinned) {\n    if (includePinned === void 0) {\n      includePinned = false;\n    }\n\n    invariant_1.default(this.isSourceId(sourceId), 'Expected a valid source ID.');\n    var isPinned = includePinned && sourceId === this.pinnedSourceId;\n    var source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId);\n    return source;\n  };\n\n  HandlerRegistryImpl.prototype.getTarget = function (targetId) {\n    invariant_1.default(this.isTargetId(targetId), 'Expected a valid target ID.');\n    return this.dropTargets.get(targetId);\n  };\n\n  HandlerRegistryImpl.prototype.getSourceType = function (sourceId) {\n    invariant_1.default(this.isSourceId(sourceId), 'Expected a valid source ID.');\n    return this.types.get(sourceId);\n  };\n\n  HandlerRegistryImpl.prototype.getTargetType = function (targetId) {\n    invariant_1.default(this.isTargetId(targetId), 'Expected a valid target ID.');\n    return this.types.get(targetId);\n  };\n\n  HandlerRegistryImpl.prototype.isSourceId = function (handlerId) {\n    var role = parseRoleFromHandlerId(handlerId);\n    return role === interfaces_1.HandlerRole.SOURCE;\n  };\n\n  HandlerRegistryImpl.prototype.isTargetId = function (handlerId) {\n    var role = parseRoleFromHandlerId(handlerId);\n    return role === interfaces_1.HandlerRole.TARGET;\n  };\n\n  HandlerRegistryImpl.prototype.removeSource = function (sourceId) {\n    var _this = this;\n\n    invariant_1.default(this.getSource(sourceId), 'Expected an existing source.');\n    this.store.dispatch(registry_1.removeSource(sourceId));\n    asap_1.default(function () {\n      _this.dragSources.delete(sourceId);\n\n      _this.types.delete(sourceId);\n    });\n  };\n\n  HandlerRegistryImpl.prototype.removeTarget = function (targetId) {\n    invariant_1.default(this.getTarget(targetId), 'Expected an existing target.');\n    this.store.dispatch(registry_1.removeTarget(targetId));\n    this.dropTargets.delete(targetId);\n    this.types.delete(targetId);\n  };\n\n  HandlerRegistryImpl.prototype.pinSource = function (sourceId) {\n    var source = this.getSource(sourceId);\n    invariant_1.default(source, 'Expected an existing source.');\n    this.pinnedSourceId = sourceId;\n    this.pinnedSource = source;\n  };\n\n  HandlerRegistryImpl.prototype.unpinSource = function () {\n    invariant_1.default(this.pinnedSource, 'No source is pinned at the time.');\n    this.pinnedSourceId = null;\n    this.pinnedSource = null;\n  };\n\n  HandlerRegistryImpl.prototype.addHandler = function (role, type, handler) {\n    var id = getNextHandlerId(role);\n    this.types.set(id, type);\n\n    if (role === interfaces_1.HandlerRole.SOURCE) {\n      this.dragSources.set(id, handler);\n    } else if (role === interfaces_1.HandlerRole.TARGET) {\n      this.dropTargets.set(id, handler);\n    }\n\n    return id;\n  };\n\n  return HandlerRegistryImpl;\n}();\n\nexports.default = HandlerRegistryImpl;","map":{"version":3,"sources":["/home/janne/repot/OperaatioJyrki/node_modules/dnd-core-cjs/lib/HandlerRegistryImpl.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","asap_1","require","invariant_1","registry_1","getNextUniqueId_1","interfaces_1","contracts_1","getNextHandlerId","role","id","default","toString","HandlerRole","SOURCE","TARGET","Error","parseRoleFromHandlerId","handlerId","mapContainsValue","map","searchValue","entries","isDone","_a","next","done","_b","HandlerRegistryImpl","store","types","Map","dragSources","dropTargets","pinnedSourceId","pinnedSource","prototype","addSource","type","source","validateType","validateSourceContract","sourceId","addHandler","dispatch","addTarget","target","validateTargetContract","targetId","containsHandler","handler","getSource","includePinned","isSourceId","isPinned","get","getTarget","isTargetId","getSourceType","getTargetType","removeSource","_this","delete","removeTarget","pinSource","unpinSource","set"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar asap_1 = __importDefault(require(\"asap\"));\nvar invariant_1 = __importDefault(require(\"invariant\"));\nvar registry_1 = require(\"./actions/registry\");\nvar getNextUniqueId_1 = __importDefault(require(\"./utils/getNextUniqueId\"));\nvar interfaces_1 = require(\"./interfaces\");\nvar contracts_1 = require(\"./contracts\");\nfunction getNextHandlerId(role) {\n    var id = getNextUniqueId_1.default().toString();\n    switch (role) {\n        case interfaces_1.HandlerRole.SOURCE:\n            return \"S\" + id;\n        case interfaces_1.HandlerRole.TARGET:\n            return \"T\" + id;\n        default:\n            throw new Error(\"Unknown Handler Role: \" + role);\n    }\n}\nfunction parseRoleFromHandlerId(handlerId) {\n    switch (handlerId[0]) {\n        case 'S':\n            return interfaces_1.HandlerRole.SOURCE;\n        case 'T':\n            return interfaces_1.HandlerRole.TARGET;\n        default:\n            invariant_1.default(false, \"Cannot parse handler ID: \" + handlerId);\n    }\n}\nfunction mapContainsValue(map, searchValue) {\n    var entries = map.entries();\n    var isDone = false;\n    do {\n        var _a = entries.next(), done = _a.done, _b = _a.value, value = _b[1];\n        if (value === searchValue) {\n            return true;\n        }\n        isDone = !!done;\n    } while (!isDone);\n    return false;\n}\nvar HandlerRegistryImpl = /** @class */ (function () {\n    function HandlerRegistryImpl(store) {\n        this.types = new Map();\n        this.dragSources = new Map();\n        this.dropTargets = new Map();\n        this.pinnedSourceId = null;\n        this.pinnedSource = null;\n        this.store = store;\n    }\n    HandlerRegistryImpl.prototype.addSource = function (type, source) {\n        contracts_1.validateType(type);\n        contracts_1.validateSourceContract(source);\n        var sourceId = this.addHandler(interfaces_1.HandlerRole.SOURCE, type, source);\n        this.store.dispatch(registry_1.addSource(sourceId));\n        return sourceId;\n    };\n    HandlerRegistryImpl.prototype.addTarget = function (type, target) {\n        contracts_1.validateType(type, true);\n        contracts_1.validateTargetContract(target);\n        var targetId = this.addHandler(interfaces_1.HandlerRole.TARGET, type, target);\n        this.store.dispatch(registry_1.addTarget(targetId));\n        return targetId;\n    };\n    HandlerRegistryImpl.prototype.containsHandler = function (handler) {\n        return (mapContainsValue(this.dragSources, handler) ||\n            mapContainsValue(this.dropTargets, handler));\n    };\n    HandlerRegistryImpl.prototype.getSource = function (sourceId, includePinned) {\n        if (includePinned === void 0) { includePinned = false; }\n        invariant_1.default(this.isSourceId(sourceId), 'Expected a valid source ID.');\n        var isPinned = includePinned && sourceId === this.pinnedSourceId;\n        var source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId);\n        return source;\n    };\n    HandlerRegistryImpl.prototype.getTarget = function (targetId) {\n        invariant_1.default(this.isTargetId(targetId), 'Expected a valid target ID.');\n        return this.dropTargets.get(targetId);\n    };\n    HandlerRegistryImpl.prototype.getSourceType = function (sourceId) {\n        invariant_1.default(this.isSourceId(sourceId), 'Expected a valid source ID.');\n        return this.types.get(sourceId);\n    };\n    HandlerRegistryImpl.prototype.getTargetType = function (targetId) {\n        invariant_1.default(this.isTargetId(targetId), 'Expected a valid target ID.');\n        return this.types.get(targetId);\n    };\n    HandlerRegistryImpl.prototype.isSourceId = function (handlerId) {\n        var role = parseRoleFromHandlerId(handlerId);\n        return role === interfaces_1.HandlerRole.SOURCE;\n    };\n    HandlerRegistryImpl.prototype.isTargetId = function (handlerId) {\n        var role = parseRoleFromHandlerId(handlerId);\n        return role === interfaces_1.HandlerRole.TARGET;\n    };\n    HandlerRegistryImpl.prototype.removeSource = function (sourceId) {\n        var _this = this;\n        invariant_1.default(this.getSource(sourceId), 'Expected an existing source.');\n        this.store.dispatch(registry_1.removeSource(sourceId));\n        asap_1.default(function () {\n            _this.dragSources.delete(sourceId);\n            _this.types.delete(sourceId);\n        });\n    };\n    HandlerRegistryImpl.prototype.removeTarget = function (targetId) {\n        invariant_1.default(this.getTarget(targetId), 'Expected an existing target.');\n        this.store.dispatch(registry_1.removeTarget(targetId));\n        this.dropTargets.delete(targetId);\n        this.types.delete(targetId);\n    };\n    HandlerRegistryImpl.prototype.pinSource = function (sourceId) {\n        var source = this.getSource(sourceId);\n        invariant_1.default(source, 'Expected an existing source.');\n        this.pinnedSourceId = sourceId;\n        this.pinnedSource = source;\n    };\n    HandlerRegistryImpl.prototype.unpinSource = function () {\n        invariant_1.default(this.pinnedSource, 'No source is pinned at the time.');\n        this.pinnedSourceId = null;\n        this.pinnedSource = null;\n    };\n    HandlerRegistryImpl.prototype.addHandler = function (role, type, handler) {\n        var id = getNextHandlerId(role);\n        this.types.set(id, type);\n        if (role === interfaces_1.HandlerRole.SOURCE) {\n            this.dragSources.set(id, handler);\n        }\n        else if (role === interfaces_1.HandlerRole.TARGET) {\n            this.dropTargets.set(id, handler);\n        }\n        return id;\n    };\n    return HandlerRegistryImpl;\n}());\nexports.default = HandlerRegistryImpl;\n"]},"metadata":{},"sourceType":"script"}