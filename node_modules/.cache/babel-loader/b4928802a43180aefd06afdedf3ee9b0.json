{"ast":null,"code":"var _jsxFileName = \"/home/janne/repot/OperaatioJyrki/src/components/YearlySafetyAmountList/YearlyList.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./YearlyList.scss\";\nimport { Button, Input, Table } from \"reactstrap\";\nimport { inject, observer } from \"mobx-react\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nconst YearlyList = inject('operationStore', 'printOutStore')(observer(props => {\n  const [dropdownOpen, setOpen] = useState(false);\n  const [dropdownIndex, setIndex] = useState();\n\n  const toggle = () => setOpen(!dropdownOpen);\n\n  const [pendingReceiver, setPendingReceiver] = useState(\"\");\n  const [draggedItem, setDraggedItem] = useState({});\n\n  const addNewTableColumn = () => {\n    console.log(props.orders);\n    props.updateOrders({\n      order: props.orders.length + 1,\n      receiver: \"\"\n    }, \"newColumn\");\n  };\n\n  const isOpen = index => {\n    if (index === dropdownIndex && dropdownOpen) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const addNewReceiver = (evt, index) => {\n    if (pendingReceiver !== \"\") {\n      evt.preventDefault();\n      props.updateOrders(props.orders.map((target, int) => {\n        if (int === index) {\n          const newTarget = {\n            order: target.order,\n            receiver: pendingReceiver\n          };\n          return newTarget;\n        } else {\n          return target;\n        }\n      }), \"newReceiver\");\n    } else {\n      return;\n    }\n  };\n\n  const removeNewReceiver = (evt, index) => {\n    setPendingReceiver(\"\");\n    props.updateOrders(props.orders.filter((target, int) => {\n      if (int !== index) {\n        return target;\n      }\n    }), \"Remove.svg\");\n  };\n\n  useEffect(() => {\n    table();\n    console.log(dropdownOpen);\n  });\n\n  const setPending = evt => {\n    evt.preventDefault();\n    setPendingReceiver(evt.target.value);\n  };\n\n  const onDragStart = (e, index) => {\n    setDraggedItem(props.orders[index]);\n    e.dataTransfer.effectAllowed = \"move\";\n    e.dataTransfer.setData(\"text/html\", e.target.parentNode);\n    e.dataTransfer.setDragImage(e.target.parentNode, 20, 20);\n  };\n\n  const onDragOver = index => {\n    const draggedOverItem = props.orders[index]; // if the item is dragged over itself, ignore\n\n    if (draggedItem === draggedOverItem) {\n      return;\n    } // filter out the currently dragged item\n\n\n    let items = props.orders.filter(item => item !== draggedItem); // add the dragged item after the dragged over item\n\n    items.splice(index, 0, draggedItem);\n    items.map((item, index) => {\n      item.order = index + 1;\n    });\n    props.updateOrders(items);\n  };\n\n  const table = () => {\n    console.log(props.orders);\n    const variables = props.orders;\n\n    if (props.orders !== undefined) {\n      return variables;\n    } else {\n      return null;\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"announcement-receivers-table-view\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(Table, {\n    className: \"announcement-receivers-table-view__table\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    className: \"announcement-receivers-table-view__table-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"El\\xE4ke vuosi\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"El\\xE4kkeen m\\xE4\\xE4r\\xE4\"))), React.createElement(\"tbody\", {\n    className: \"announcement-receivers-table-view__table-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, table() !== null && table().map((target, index) => React.createElement(\"tr\", {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    draggable: true,\n    onDragStart: e => onDragStart(e, index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, target.order, React.createElement(Input, {\n    id: \"receiverInput\",\n    onChange: evt => {\n      setPending(evt);\n    },\n    className: \"announcement-receivers-table-view__table-body-input\",\n    type: \"select\",\n    name: \"select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  })))))), React.createElement(Button, {\n    id: \"addNewReceiverTableColumn\",\n    onClick: () => addNewTableColumn(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"add\"));\n}));\nexport default YearlyList;","map":{"version":3,"sources":["/home/janne/repot/OperaatioJyrki/src/components/YearlySafetyAmountList/YearlyList.tsx"],"names":["React","useState","useEffect","Button","Input","Table","inject","observer","YearlyList","props","dropdownOpen","setOpen","dropdownIndex","setIndex","toggle","pendingReceiver","setPendingReceiver","draggedItem","setDraggedItem","addNewTableColumn","console","log","orders","updateOrders","order","length","receiver","isOpen","index","addNewReceiver","evt","preventDefault","map","target","int","newTarget","removeNewReceiver","filter","table","setPending","value","onDragStart","e","dataTransfer","effectAllowed","setData","parentNode","setDragImage","onDragOver","draggedOverItem","items","item","splice","variables","undefined"],"mappings":"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","sourcesContent":["import React, {useState, useRef, createRef, useEffect} from \"react\"\nimport \"./YearlyList.scss\"\nimport {\n    Button,\n    Input,\n    Row,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n    Table,\n    ButtonDropdown\n} from \"reactstrap\";\nimport {inject, observer} from \"mobx-react\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n\n\nconst YearlyList = inject('operationStore', 'printOutStore')(observer((props:any) => {\n\n    const [dropdownOpen, setOpen] = useState(false);\n    const [dropdownIndex, setIndex] = useState();\n    const toggle = () => setOpen(!dropdownOpen);\n    const [pendingReceiver, setPendingReceiver]=useState(\"\");\n    const [draggedItem, setDraggedItem] = useState({})\n\n    const addNewTableColumn = () => {\n        console.log(props.orders)\n        props.updateOrders({order: props.orders.length + 1, receiver: \"\"},\"newColumn\")\n\n    }\n\n    const isOpen=(index:any)=>{\n        if(index===dropdownIndex && dropdownOpen){\n            return true\n        }else{\n            return false\n        }\n    };\n    const addNewReceiver =(evt:any,index:number)=>{\n        if(pendingReceiver !==\"\") {\n            evt.preventDefault();\n            props.updateOrders(props.orders.map((target: any, int: number) => {\n                if (int === index) {\n                    const newTarget = {\n                        order: target.order,\n                        receiver: pendingReceiver\n                    }\n                    return newTarget\n                } else {\n                    return target\n                }\n            }),\"newReceiver\")\n        }else{\n            return\n        }\n    };\n    const removeNewReceiver =(evt:any,index:any)=>{\n        setPendingReceiver(\"\")\n        props.updateOrders(props.orders.filter((target: any, int: number) => {\n            if (int !== index) {\n                return target\n            }\n        }),\"Remove.svg\")\n\n    }\n    useEffect(()=>{\n        table()\nconsole.log(dropdownOpen)\n    },)\n    const setPending =(evt:any)=>{\n\n        evt.preventDefault();\n        setPendingReceiver(evt.target.value)\n    }\n    const onDragStart = (e: any, index: any) => {\n        setDraggedItem(props.orders[index])\n        e.dataTransfer.effectAllowed = \"move\";\n        e.dataTransfer.setData(\"text/html\", e.target.parentNode);\n        e.dataTransfer.setDragImage(e.target.parentNode, 20, 20);\n    };\n\n    const onDragOver = (index: any) => {\n        const draggedOverItem = props.orders[index];\n        // if the item is dragged over itself, ignore\n        if (draggedItem === draggedOverItem) {\n            return;\n        }\n\n        // filter out the currently dragged item\n        let items: any = props.orders.filter((item:any) => item !== draggedItem);\n\n        // add the dragged item after the dragged over item\n        items.splice(index, 0, draggedItem);\n        items.map((item:any,index:any)=>{\n            item.order= index+1;\n        })\n\n        props.updateOrders(items);\n    };\n\n    const table =()=> {\n        console.log(props.orders)\n        const variables = props.orders\n        if(props.orders!== undefined) {\n            return variables\n        }else{\n            return null\n        }\n    }\n\n    return (\n        <div className=\"announcement-receivers-table-view\">\n\n            <Table className=\"announcement-receivers-table-view__table\">\n                <thead className={\"announcement-receivers-table-view__table-header\"}>\n                <tr>\n                    <th>Eläke vuosi</th>\n                    <th>Eläkkeen määrä</th>\n                </tr>\n                </thead>\n                <tbody className={\"announcement-receivers-table-view__table-body\"}>\n                {(table()!== null)\n                    &&\n                    table().map((target: any, index: number) => (\n                    <tr key={index} >\n                        <td draggable onDragStart={e => onDragStart(e, index)}>{target.order}\n                                        <Input id={\"receiverInput\"} onChange={(evt)=>{setPending(evt)}} className={\"announcement-receivers-table-view__table-body-input\"} type=\"select\" name=\"select\"/>\n                          </td>\n                    </tr>\n\n                ))}\n                </tbody>\n            </Table>\n            <Button id={\"addNewReceiverTableColumn\"} onClick={() => addNewTableColumn()}>add</Button>\n        </div>\n    )\n}))\n\n\nexport default YearlyList;"]},"metadata":{},"sourceType":"module"}