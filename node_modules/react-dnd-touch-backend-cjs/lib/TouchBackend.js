"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
var invariant_1 = __importDefault(require("invariant"));
var interfaces_1 = require("./interfaces");
var predicates_1 = require("./utils/predicates");
var offsets_1 = require("./utils/offsets");
var math_1 = require("./utils/math");
var supportsPassive_1 = __importDefault(require("./utils/supportsPassive"));
var OptionsReader_1 = require("./OptionsReader");
var eventNames = (_a = {},
    _a[interfaces_1.ListenerType.mouse] = {
        start: 'mousedown',
        move: 'mousemove',
        end: 'mouseup',
        contextmenu: 'contextmenu',
    },
    _a[interfaces_1.ListenerType.touch] = {
        start: 'touchstart',
        move: 'touchmove',
        end: 'touchend',
    },
    _a[interfaces_1.ListenerType.keyboard] = {
        keydown: 'keydown',
    },
    _a);
var TouchBackend = /** @class */ (function () {
    function TouchBackend(manager, context, options) {
        var _this = this;
        this.getSourceClientOffset = function (sourceId) {
            return offsets_1.getNodeClientOffset(_this.sourceNodes[sourceId]);
        };
        this.handleTopMoveStartCapture = function (e) {
            if (!predicates_1.eventShouldStartDrag(e)) {
                return;
            }
            _this.moveStartSourceIds = [];
        };
        this.handleMoveStart = function (sourceId) {
            // Just because we received an event doesn't necessarily mean we need to collect drag sources.
            // We only collect start collecting drag sources on touch and left mouse events.
            if (Array.isArray(_this.moveStartSourceIds)) {
                _this.moveStartSourceIds.unshift(sourceId);
            }
        };
        this.handleTopMoveStart = function (e) {
            if (!predicates_1.eventShouldStartDrag(e)) {
                return;
            }
            // Don't prematurely preventDefault() here since it might:
            // 1. Mess up scrolling
            // 2. Mess up long tap (which brings up context menu)
            // 3. If there's an anchor link as a child, tap won't be triggered on link
            var clientOffset = offsets_1.getEventClientOffset(e);
            if (clientOffset) {
                _this._mouseClientOffset = clientOffset;
            }
            _this.waitingForDelay = false;
        };
        this.handleTopMoveStartDelay = function (e) {
            if (!predicates_1.eventShouldStartDrag(e)) {
                return;
            }
            var delay = e.type === eventNames.touch.start
                ? _this.options.delayTouchStart
                : _this.options.delayMouseStart;
            _this.timeout = setTimeout(_this.handleTopMoveStart.bind(_this, e), delay);
            _this.waitingForDelay = true;
        };
        this.handleTopMoveCapture = function () {
            _this.dragOverTargetIds = [];
        };
        this.handleMove = function (_, targetId) {
            if (_this.dragOverTargetIds) {
                _this.dragOverTargetIds.unshift(targetId);
            }
        };
        this.handleTopMove = function (e) {
            if (_this.timeout) {
                clearTimeout(_this.timeout);
            }
            if (!_this.document || _this.waitingForDelay) {
                return;
            }
            var _a = _this, moveStartSourceIds = _a.moveStartSourceIds, dragOverTargetIds = _a.dragOverTargetIds;
            var enableHoverOutsideTarget = _this.options.enableHoverOutsideTarget;
            var clientOffset = offsets_1.getEventClientOffset(e);
            if (!clientOffset) {
                return;
            }
            // If the touch move started as a scroll, or is is between the scroll angles
            if (_this._isScrolling ||
                (!_this.monitor.isDragging() &&
                    math_1.inAngleRanges(_this._mouseClientOffset.x || 0, _this._mouseClientOffset.y || 0, clientOffset.x, clientOffset.y, _this.options.scrollAngleRanges))) {
                _this._isScrolling = true;
                return;
            }
            // If we're not dragging and we've moved a little, that counts as a drag start
            if (!_this.monitor.isDragging() &&
                // eslint-disable-next-line no-prototype-builtins
                _this._mouseClientOffset.hasOwnProperty('x') &&
                moveStartSourceIds &&
                math_1.distance(_this._mouseClientOffset.x || 0, _this._mouseClientOffset.y || 0, clientOffset.x, clientOffset.y) > (_this.options.touchSlop ? _this.options.touchSlop : 0)) {
                _this.moveStartSourceIds = undefined;
                _this.actions.beginDrag(moveStartSourceIds, {
                    clientOffset: _this._mouseClientOffset,
                    getSourceClientOffset: _this.getSourceClientOffset,
                    publishSource: false,
                });
            }
            if (!_this.monitor.isDragging()) {
                return;
            }
            var sourceNode = _this.sourceNodes[_this.monitor.getSourceId()];
            _this.installSourceNodeRemovalObserver(sourceNode);
            _this.actions.publishDragSource();
            e.preventDefault();
            // Get the node elements of the hovered DropTargets
            var dragOverTargetNodes = (dragOverTargetIds || []).map(function (key) { return _this.targetNodes[key]; });
            // Get the a ordered list of nodes that are touched by
            var elementsAtPoint = _this.options.getDropTargetElementsAtPoint
                ? _this.options.getDropTargetElementsAtPoint(clientOffset.x, clientOffset.y, dragOverTargetNodes)
                : _this.document.elementsFromPoint(clientOffset.x, clientOffset.y);
            // Extend list with parents that are not receiving elementsFromPoint events (size 0 elements and svg groups)
            var elementsAtPointExtended = [];
            for (var nodeId in elementsAtPoint) {
                // eslint-disable-next-line no-prototype-builtins
                if (!elementsAtPoint.hasOwnProperty(nodeId)) {
                    continue;
                }
                var currentNode = elementsAtPoint[nodeId];
                elementsAtPointExtended.push(currentNode);
                while (currentNode) {
                    currentNode = currentNode.parentElement;
                    if (elementsAtPointExtended.indexOf(currentNode) === -1) {
                        elementsAtPointExtended.push(currentNode);
                    }
                }
            }
            var orderedDragOverTargetIds = elementsAtPointExtended
                // Filter off nodes that arent a hovered DropTargets nodes
                .filter(function (node) { return dragOverTargetNodes.indexOf(node) > -1; })
                // Map back the nodes elements to targetIds
                .map(function (node) {
                for (var targetId in _this.targetNodes) {
                    if (node === _this.targetNodes[targetId]) {
                        return targetId;
                    }
                }
                return undefined;
            })
                // Filter off possible null rows
                .filter(function (node) { return !!node; })
                .filter(function (id, index, ids) { return ids.indexOf(id) === index; });
            // Invoke hover for drop targets when source node is still over and pointer is outside
            if (enableHoverOutsideTarget) {
                for (var targetId in _this.targetNodes) {
                    if (_this.targetNodes[targetId] &&
                        _this.targetNodes[targetId].contains(sourceNode) &&
                        orderedDragOverTargetIds.indexOf(targetId) === -1) {
                        orderedDragOverTargetIds.unshift(targetId);
                        break;
                    }
                }
            }
            // Reverse order because dnd-core reverse it before calling the DropTarget drop methods
            orderedDragOverTargetIds.reverse();
            _this.actions.hover(orderedDragOverTargetIds, {
                clientOffset: clientOffset,
            });
        };
        this.handleTopMoveEndCapture = function (e) {
            _this._isScrolling = false;
            if (!predicates_1.eventShouldEndDrag(e)) {
                return;
            }
            if (!_this.monitor.isDragging() || _this.monitor.didDrop()) {
                _this.moveStartSourceIds = undefined;
                return;
            }
            e.preventDefault();
            _this._mouseClientOffset = {};
            _this.uninstallSourceNodeRemovalObserver();
            _this.actions.drop();
            _this.actions.endDrag();
        };
        this.handleCancelOnEscape = function (e) {
            if (e.key === 'Escape' && _this.monitor.isDragging()) {
                _this._mouseClientOffset = {};
                _this.uninstallSourceNodeRemovalObserver();
                _this.actions.endDrag();
            }
        };
        this.options = new OptionsReader_1.OptionsReader(options, context);
        this.actions = manager.getActions();
        this.monitor = manager.getMonitor();
        this.sourceNodes = {};
        this.sourcePreviewNodes = {};
        this.sourcePreviewNodeOptions = {};
        this.targetNodes = {};
        this.listenerTypes = [];
        this._mouseClientOffset = {};
        this._isScrolling = false;
        if (this.options.enableMouseEvents) {
            this.listenerTypes.push(interfaces_1.ListenerType.mouse);
        }
        if (this.options.enableTouchEvents) {
            this.listenerTypes.push(interfaces_1.ListenerType.touch);
        }
        if (this.options.enableKeyboardEvents) {
            this.listenerTypes.push(interfaces_1.ListenerType.keyboard);
        }
    }
    Object.defineProperty(TouchBackend.prototype, "window", {
        // public for test
        get: function () {
            return this.options.window;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TouchBackend.prototype, "document", {
        // public for test
        get: function () {
            if (this.window) {
                return this.window.document;
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    TouchBackend.prototype.setup = function () {
        if (!this.window) {
            return;
        }
        invariant_1.default(!TouchBackend.isSetUp, 'Cannot have two Touch backends at the same time.');
        TouchBackend.isSetUp = true;
        this.addEventListener(this.window, 'start', this.getTopMoveStartHandler());
        this.addEventListener(this.window, 'start', this.handleTopMoveStartCapture, true);
        this.addEventListener(this.window, 'move', this.handleTopMove);
        this.addEventListener(this.window, 'move', this.handleTopMoveCapture, true);
        this.addEventListener(this.window, 'end', this.handleTopMoveEndCapture, true);
        if (this.options.enableMouseEvents && !this.options.ignoreContextMenu) {
            this.addEventListener(this.window, 'contextmenu', this.handleTopMoveEndCapture);
        }
        if (this.options.enableKeyboardEvents) {
            this.addEventListener(this.window, 'keydown', this.handleCancelOnEscape, true);
        }
    };
    TouchBackend.prototype.teardown = function () {
        if (!this.window) {
            return;
        }
        TouchBackend.isSetUp = false;
        this._mouseClientOffset = {};
        this.removeEventListener(this.window, 'start', this.handleTopMoveStartCapture, true);
        this.removeEventListener(this.window, 'start', this.handleTopMoveStart);
        this.removeEventListener(this.window, 'move', this.handleTopMoveCapture, true);
        this.removeEventListener(this.window, 'move', this.handleTopMove);
        this.removeEventListener(this.window, 'end', this.handleTopMoveEndCapture, true);
        if (this.options.enableMouseEvents && !this.options.ignoreContextMenu) {
            this.removeEventListener(this.window, 'contextmenu', this.handleTopMoveEndCapture);
        }
        if (this.options.enableKeyboardEvents) {
            this.removeEventListener(this.window, 'keydown', this.handleCancelOnEscape, true);
        }
        this.uninstallSourceNodeRemovalObserver();
    };
    TouchBackend.prototype.addEventListener = function (subject, event, handler, capture) {
        var options = supportsPassive_1.default ? { capture: capture, passive: false } : capture;
        this.listenerTypes.forEach(function (listenerType) {
            var evt = eventNames[listenerType][event];
            if (evt) {
                subject.addEventListener(evt, handler, options);
            }
        });
    };
    TouchBackend.prototype.removeEventListener = function (subject, event, handler, capture) {
        var options = supportsPassive_1.default ? { capture: capture, passive: false } : capture;
        this.listenerTypes.forEach(function (listenerType) {
            var evt = eventNames[listenerType][event];
            if (evt) {
                subject.removeEventListener(evt, handler, options);
            }
        });
    };
    TouchBackend.prototype.connectDragSource = function (sourceId, node) {
        var _this = this;
        var handleMoveStart = this.handleMoveStart.bind(this, sourceId);
        this.sourceNodes[sourceId] = node;
        this.addEventListener(node, 'start', handleMoveStart);
        return function () {
            delete _this.sourceNodes[sourceId];
            _this.removeEventListener(node, 'start', handleMoveStart);
        };
    };
    TouchBackend.prototype.connectDragPreview = function (sourceId, node, options) {
        var _this = this;
        this.sourcePreviewNodeOptions[sourceId] = options;
        this.sourcePreviewNodes[sourceId] = node;
        return function () {
            delete _this.sourcePreviewNodes[sourceId];
            delete _this.sourcePreviewNodeOptions[sourceId];
        };
    };
    TouchBackend.prototype.connectDropTarget = function (targetId, node) {
        var _this = this;
        if (!this.document) {
            return function () { return null; };
        }
        var handleMove = function (e) {
            if (!_this.document || !_this.monitor.isDragging()) {
                return;
            }
            var coords;
            /**
             * Grab the coordinates for the current mouse/touch position
             */
            switch (e.type) {
                case eventNames.mouse.move:
                    coords = {
                        x: e.clientX,
                        y: e.clientY,
                    };
                    break;
                case eventNames.touch.move:
                    coords = {
                        x: e.touches[0].clientX,
                        y: e.touches[0].clientY,
                    };
                    break;
            }
            /**
             * Use the coordinates to grab the element the drag ended on.
             * If the element is the same as the target node (or any of it's children) then we have hit a drop target and can handle the move.
             */
            var droppedOn = coords != null
                ? _this.document.elementFromPoint(coords.x, coords.y)
                : undefined;
            var childMatch = droppedOn && node.contains(droppedOn);
            if (droppedOn === node || childMatch) {
                return _this.handleMove(e, targetId);
            }
        };
        /**
         * Attaching the event listener to the body so that touchmove will work while dragging over multiple target elements.
         */
        this.addEventListener(this.document.body, 'move', handleMove);
        this.targetNodes[targetId] = node;
        return function () {
            if (_this.document) {
                delete _this.targetNodes[targetId];
                _this.removeEventListener(_this.document.body, 'move', handleMove);
            }
        };
    };
    TouchBackend.prototype.getTopMoveStartHandler = function () {
        if (!this.options.delayTouchStart && !this.options.delayMouseStart) {
            return this.handleTopMoveStart;
        }
        return this.handleTopMoveStartDelay;
    };
    TouchBackend.prototype.installSourceNodeRemovalObserver = function (node) {
        var _this = this;
        this.uninstallSourceNodeRemovalObserver();
        this.draggedSourceNode = node;
        this.draggedSourceNodeRemovalObserver = new MutationObserver(function () {
            if (node && !node.parentElement) {
                _this.resurrectSourceNode();
                _this.uninstallSourceNodeRemovalObserver();
            }
        });
        if (!node || !node.parentElement) {
            return;
        }
        this.draggedSourceNodeRemovalObserver.observe(node.parentElement, {
            childList: true,
        });
    };
    TouchBackend.prototype.resurrectSourceNode = function () {
        if (this.document && this.draggedSourceNode) {
            this.draggedSourceNode.style.display = 'none';
            this.draggedSourceNode.removeAttribute('data-reactid');
            this.document.body.appendChild(this.draggedSourceNode);
        }
    };
    TouchBackend.prototype.uninstallSourceNodeRemovalObserver = function () {
        if (this.draggedSourceNodeRemovalObserver) {
            this.draggedSourceNodeRemovalObserver.disconnect();
        }
        this.draggedSourceNodeRemovalObserver = undefined;
        this.draggedSourceNode = undefined;
    };
    return TouchBackend;
}());
exports.default = TouchBackend;
